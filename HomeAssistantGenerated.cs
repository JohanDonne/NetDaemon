//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v25.10.0.0
//   At: 2025-04-09T11:20:34.5345537+02:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<IEntityFactory, GeneratedEntityFactory>();
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TimeEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<CommandLineServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<ModbusServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<OcppServices>();
        serviceCollection.AddTransient<OnedriveServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SolisModbusServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TadoServices>();
        serviceCollection.AddTransient<TimeServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VolkswagenWeConnectIdServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

/// <summary>
/// Allows HassModel to instantiate the correct generated Entity types
/// </summary>
public class GeneratedEntityFactory : IEntityFactory
{
    public Entity CreateEntity(IHaContext haContext, string entityId)
    {
        var dot = entityId.IndexOf('.', StringComparison.Ordinal);
        var domain = dot < 0 ? entityId.AsSpan() : entityId[..dot];
        return domain switch
        {
            "automation" => new AutomationEntity(haContext, entityId),
            "binary_sensor" => new BinarySensorEntity(haContext, entityId),
            "button" => new ButtonEntity(haContext, entityId),
            "climate" => new ClimateEntity(haContext, entityId),
            "conversation" => new ConversationEntity(haContext, entityId),
            "device_tracker" => new DeviceTrackerEntity(haContext, entityId),
            "input_boolean" => new InputBooleanEntity(haContext, entityId),
            "input_number" => new InputNumberEntity(haContext, entityId),
            "input_text" => new InputTextEntity(haContext, entityId),
            "light" => new LightEntity(haContext, entityId),
            "media_player" => new MediaPlayerEntity(haContext, entityId),
            "number" => new NumberEntity(haContext, entityId),
            "person" => new PersonEntity(haContext, entityId),
            "select" => new SelectEntity(haContext, entityId),
            "sensor" when IsNumeric() => new NumericSensorEntity(haContext, entityId),
            "sensor" => new SensorEntity(haContext, entityId),
            "switch" => new SwitchEntity(haContext, entityId),
            "time" => new TimeEntity(haContext, entityId),
            "update" => new UpdateEntity(haContext, entityId),
            "zone" => new ZoneEntity(haContext, entityId),
            _ => new Entity(haContext, entityId)};
        bool IsNumeric() => haContext.GetState(entityId)?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    ClimateEntities Climate { get; }

    ConversationEntities Conversation { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    InputBooleanEntities InputBoolean { get; }

    InputNumberEntities InputNumber { get; }

    InputTextEntities InputText { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SwitchEntities Switch { get; }

    TimeEntities Time { get; }

    UpdateEntities Update { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TimeEntities Time => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all light entities currently registered (at runtime) in Home Assistant as LightEntity</summary>
    public IEnumerable<LightEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("light.")).Select(e => new LightEntity(e));
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all media_player entities currently registered (at runtime) in Home Assistant as MediaPlayerEntity</summary>
    public IEnumerable<MediaPlayerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("media_player.")).Select(e => new MediaPlayerEntity(e));
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all automation entities currently registered (at runtime) in Home Assistant as AutomationEntity</summary>
    public IEnumerable<AutomationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("automation.")).Select(e => new AutomationEntity(e));
    ///<summary>Calculate Total Power import</summary>
    public AutomationEntity CalculateActualTotalPowerImport => new(_haContext, "automation.calculate_actual_total_power_import");
    ///<summary>ChargeDynamic</summary>
    public AutomationEntity Chargedynamic => new(_haContext, "automation.chargedynamic");
    ///<summary>Chargerlock</summary>
    public AutomationEntity Chargerlock => new(_haContext, "automation.chargerlock");
    ///<summary>Clean_Database</summary>
    public AutomationEntity CleanDatabase => new(_haContext, "automation.clean_database");
    ///<summary>Configure OCPP Charger</summary>
    public AutomationEntity ConfigureOcppCharger => new(_haContext, "automation.configure_ocpp_charger");
    ///<summary>Convert Charger Power to current</summary>
    public AutomationEntity ConvertChargerPowerToCurrent => new(_haContext, "automation.convert_charger_power_to_current");
    ///<summary>Ensure MeterValues Config is OK</summary>
    public AutomationEntity EnsureMetervaluesConfigIsOk => new(_haContext, "automation.ensure_metervalues_config_is_ok");
    ///<summary>Send_max_current_to_charger</summary>
    public AutomationEntity SendMaxCurrentToCharger => new(_haContext, "automation.send_max_current_to_charger");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all binary_sensor entities currently registered (at runtime) in Home Assistant as BinarySensorEntity</summary>
    public IEnumerable<BinarySensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("binary_sensor.")).Select(e => new BinarySensorEntity(e));
    ///<summary>IB0347606272 Connection state</summary>
    public BinarySensorEntity Ib0347606272ConnectionState => new(_haContext, "binary_sensor.ib0347606272_connection_state");
    ///<summary>ID.3 Pro Performance Car Is Active</summary>
    public BinarySensorEntity Id3ProPerformanceCarIsActive => new(_haContext, "binary_sensor.id_3_pro_performance_car_is_active");
    ///<summary>ID.3 Pro Performance Car Is Online</summary>
    public BinarySensorEntity Id3ProPerformanceCarIsOnline => new(_haContext, "binary_sensor.id_3_pro_performance_car_is_online");
    ///<summary>ID.3 Pro Performance Climatisation At Unlock</summary>
    public BinarySensorEntity Id3ProPerformanceClimatisationAtUnlock => new(_haContext, "binary_sensor.id_3_pro_performance_climatisation_at_unlock");
    ///<summary>ID.3 Pro Performance Climatisation Without External Power</summary>
    public BinarySensorEntity Id3ProPerformanceClimatisationWithoutExternalPower => new(_haContext, "binary_sensor.id_3_pro_performance_climatisation_without_external_power");
    ///<summary>ID.3 Pro Performance Front Window Heating State</summary>
    public BinarySensorEntity Id3ProPerformanceFrontWindowHeatingState => new(_haContext, "binary_sensor.id_3_pro_performance_front_window_heating_state");
    ///<summary>ID.3 Pro Performance Insufficient Battery Level Warning</summary>
    public BinarySensorEntity Id3ProPerformanceInsufficientBatteryLevelWarning => new(_haContext, "binary_sensor.id_3_pro_performance_insufficient_battery_level_warning");
    ///<summary>ID.3 Pro Performance Lights Left</summary>
    public BinarySensorEntity Id3ProPerformanceLightsLeft => new(_haContext, "binary_sensor.id_3_pro_performance_lights_left");
    ///<summary>ID.3 Pro Performance Lights Right</summary>
    public BinarySensorEntity Id3ProPerformanceLightsRight => new(_haContext, "binary_sensor.id_3_pro_performance_lights_right");
    ///<summary>ID.3 Pro Performance Rear Window Heating State</summary>
    public BinarySensorEntity Id3ProPerformanceRearWindowHeatingState => new(_haContext, "binary_sensor.id_3_pro_performance_rear_window_heating_state");
    ///<summary>ID.3 Pro Performance Window Heating Enabled</summary>
    public BinarySensorEntity Id3ProPerformanceWindowHeatingEnabled => new(_haContext, "binary_sensor.id_3_pro_performance_window_heating_enabled");
    ///<summary>ID.3 Pro Performance Zone Front Left Enabled</summary>
    public BinarySensorEntity Id3ProPerformanceZoneFrontLeftEnabled => new(_haContext, "binary_sensor.id_3_pro_performance_zone_front_left_enabled");
    ///<summary>ID.3 Pro Performance Zone Front Right Enabled</summary>
    public BinarySensorEntity Id3ProPerformanceZoneFrontRightEnabled => new(_haContext, "binary_sensor.id_3_pro_performance_zone_front_right_enabled");
    ///<summary>RPi Power status</summary>
    public BinarySensorEntity RpiPowerStatus => new(_haContext, "binary_sensor.rpi_power_status");
    ///<summary>RU3370192384 Batterij</summary>
    public BinarySensorEntity Ru3370192384Batterij => new(_haContext, "binary_sensor.ru3370192384_batterij");
    ///<summary>RU3370192384 Connection state</summary>
    public BinarySensorEntity Ru3370192384ConnectionState => new(_haContext, "binary_sensor.ru3370192384_connection_state");
    ///<summary>Verwarming Connectiviteit</summary>
    public BinarySensorEntity VerwarmingConnectiviteit => new(_haContext, "binary_sensor.verwarming_connectiviteit");
    ///<summary>Verwarming Early start</summary>
    public BinarySensorEntity VerwarmingEarlyStart => new(_haContext, "binary_sensor.verwarming_early_start");
    ///<summary>Verwarming Overlay</summary>
    public BinarySensorEntity VerwarmingOverlay => new(_haContext, "binary_sensor.verwarming_overlay");
    ///<summary>Verwarming Raam</summary>
    public BinarySensorEntity VerwarmingRaam => new(_haContext, "binary_sensor.verwarming_raam");
    ///<summary>Verwarming Vermogen</summary>
    public BinarySensorEntity VerwarmingVermogen => new(_haContext, "binary_sensor.verwarming_vermogen");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all button entities currently registered (at runtime) in Home Assistant as ButtonEntity</summary>
    public IEnumerable<ButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("button.")).Select(e => new ButtonEntity(e));
    ///<summary>charger Reset</summary>
    public ButtonEntity ChargerReset => new(_haContext, "button.charger_reset");
    ///<summary>charger Unlock</summary>
    public ButtonEntity ChargerUnlock => new(_haContext, "button.charger_unlock");
    ///<summary>ID.3 Pro Performance Start Charging</summary>
    public ButtonEntity Id3ProPerformanceStartCharging => new(_haContext, "button.id_3_pro_performance_start_charging");
    ///<summary>ID.3 Pro Performance Start Climate</summary>
    public ButtonEntity Id3ProPerformanceStartClimate => new(_haContext, "button.id_3_pro_performance_start_climate");
    ///<summary>ID.3 Pro Performance Stop Charging</summary>
    public ButtonEntity Id3ProPerformanceStopCharging => new(_haContext, "button.id_3_pro_performance_stop_charging");
    ///<summary>ID.3 Pro Performance Stop Climate</summary>
    public ButtonEntity Id3ProPerformanceStopClimate => new(_haContext, "button.id_3_pro_performance_stop_climate");
    ///<summary>ID.3 Pro Performance Toggle AC Charge Speed</summary>
    public ButtonEntity Id3ProPerformanceToggleAcChargeSpeed => new(_haContext, "button.id_3_pro_performance_toggle_ac_charge_speed");
    ///<summary>Soliscloud Update Timed Charge/Discharge</summary>
    public ButtonEntity SoliscloudUpdateTimedChargeDischarge => new(_haContext, "button.soliscloud_update_timed_charge_discharge");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all climate entities currently registered (at runtime) in Home Assistant as ClimateEntity</summary>
    public IEnumerable<ClimateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("climate.")).Select(e => new ClimateEntity(e));
    ///<summary>aircoliving</summary>
    public ClimateEntity Aircoliving => new(_haContext, "climate.aircoliving");
    ///<summary>Verwarming</summary>
    public ClimateEntity Verwarming => new(_haContext, "climate.verwarming");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all conversation entities currently registered (at runtime) in Home Assistant as ConversationEntity</summary>
    public IEnumerable<ConversationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("conversation.")).Select(e => new ConversationEntity(e));
    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all device_tracker entities currently registered (at runtime) in Home Assistant as DeviceTrackerEntity</summary>
    public IEnumerable<DeviceTrackerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("device_tracker.")).Select(e => new DeviceTrackerEntity(e));
    ///<summary>ID.3 Pro Performance tracker</summary>
    public DeviceTrackerEntity Id3ProPerformanceTracker => new(_haContext, "device_tracker.id_3_pro_performance_tracker");
    ///<summary>Johan</summary>
    public DeviceTrackerEntity Johan => new(_haContext, "device_tracker.johan");
    ///<summary>Marleen</summary>
    public DeviceTrackerEntity Marleen => new(_haContext, "device_tracker.marleen");
    ///<summary>tablet Johan </summary>
    public DeviceTrackerEntity TabletJohan => new(_haContext, "device_tracker.tablet_johan");
    ///<summary>tablet johan</summary>
    public DeviceTrackerEntity TabletJohan2 => new(_haContext, "device_tracker.tablet_johan_2");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_boolean entities currently registered (at runtime) in Home Assistant as InputBooleanEntity</summary>
    public IEnumerable<InputBooleanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_boolean.")).Select(e => new InputBooleanEntity(e));
    ///<summary>Dynamic_Charging</summary>
    public InputBooleanEntity DynamicCharging => new(_haContext, "input_boolean.dynamic_charging");
    ///<summary>Charger Enabled</summary>
    public InputBooleanEntity Enablecharger => new(_haContext, "input_boolean.enablecharger");
    ///<summary>netdaemon_dot_net_apps_apps_electricity_electricity_app</summary>
    public InputBooleanEntity NetdaemonDotNetAppsAppsElectricityElectricityApp => new(_haContext, "input_boolean.netdaemon_dot_net_apps_apps_electricity_electricity_app");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_number entities currently registered (at runtime) in Home Assistant as InputNumberEntity</summary>
    public IEnumerable<InputNumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_number.")).Select(e => new InputNumberEntity(e));
    ///<summary>Actual_Battery_Power</summary>
    public InputNumberEntity ActualBatteryPower => new(_haContext, "input_number.actual_battery_power");
    ///<summary>Actual_Total_Power</summary>
    public InputNumberEntity ActualTotalPower => new(_haContext, "input_number.actual_total_power");
    ///<summary>charger_startpower_buffer</summary>
    public InputNumberEntity ChargerStartpowerBuffer => new(_haContext, "input_number.charger_startpower_buffer");
    ///<summary>net_max_power</summary>
    public InputNumberEntity NetMaxPower => new(_haContext, "input_number.net_max_power");
    ///<summary>Nul</summary>
    public InputNumberEntity Nul => new(_haContext, "input_number.nul");
    ///<summary>Offered_Charging_Power</summary>
    public InputNumberEntity OfferedChargingPower => new(_haContext, "input_number.offered_charging_power");
    ///<summary>Set_Charger_Current</summary>
    public InputNumberEntity SetChargerCurrent => new(_haContext, "input_number.set_charger_current");
    ///<summary>Set_Charging_Power</summary>
    public InputNumberEntity SetChargerPower => new(_haContext, "input_number.set_charger_power");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_text entities currently registered (at runtime) in Home Assistant as InputTextEntity</summary>
    public IEnumerable<InputTextEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_text.")).Select(e => new InputTextEntity(e));
    ///<summary>Active_Charging_Power</summary>
    public InputTextEntity ActiveChargingPower => new(_haContext, "input_text.active_charging_power");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all number entities currently registered (at runtime) in Home Assistant as NumberEntity</summary>
    public IEnumerable<NumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("number.")).Select(e => new NumberEntity(e));
    ///<summary>charger Maximum Current</summary>
    public NumberEntity ChargerMaximumCurrent => new(_haContext, "number.charger_maximum_current");
    ///<summary>ID.3 Pro Performance Target Climate Temperature</summary>
    public NumberEntity Id3ProPerformanceTargetClimateTemperature => new(_haContext, "number.id_3_pro_performance_target_climate_temperature");
    ///<summary>ID.3 Pro Performance Target State Of Charge</summary>
    public NumberEntity Id3ProPerformanceTargetStateOfCharge => new(_haContext, "number.id_3_pro_performance_target_state_of_charge");
    ///<summary>solaredge_local (Active Power Limit)</summary>
    public NumberEntity SolaredgeLocalActivePowerLimit => new(_haContext, "number.solaredge_local_active_power_limit");
    ///<summary>Solis S6-EH1P Backup SOC</summary>
    public NumberEntity SolisS6Eh1pBackupSoc => new(_haContext, "number.solis_s6_eh1p_backup_soc");
    ///<summary>Solis S6-EH1P Battery Charge Limit Power</summary>
    public NumberEntity SolisS6Eh1pBatteryChargeLimitPower => new(_haContext, "number.solis_s6_eh1p_battery_charge_limit_power");
    ///<summary>Solis S6-EH1P Battery Discharge Limit Power</summary>
    public NumberEntity SolisS6Eh1pBatteryDischargeLimitPower => new(_haContext, "number.solis_s6_eh1p_battery_discharge_limit_power");
    ///<summary>Solis S6-EH1P Battery Force-charge Power Limitation</summary>
    public NumberEntity SolisS6Eh1pBatteryForceChargePowerLimitation => new(_haContext, "number.solis_s6_eh1p_battery_force_charge_power_limitation");
    ///<summary>Solis S6-EH1P Battery Max Charge Current</summary>
    public NumberEntity SolisS6Eh1pBatteryMaxChargeCurrent => new(_haContext, "number.solis_s6_eh1p_battery_max_charge_current");
    ///<summary>Solis S6-EH1P Battery Max Discharge Current</summary>
    public NumberEntity SolisS6Eh1pBatteryMaxDischargeCurrent => new(_haContext, "number.solis_s6_eh1p_battery_max_discharge_current");
    ///<summary>Solis S6-EH1P Flexible Export Backflow Power</summary>
    public NumberEntity SolisS6Eh1pFlexibleExportBackflowPower => new(_haContext, "number.solis_s6_eh1p_flexible_export_backflow_power");
    ///<summary>Solis S6-EH1P Force Charge SOC</summary>
    public NumberEntity SolisS6Eh1pForceChargeSoc => new(_haContext, "number.solis_s6_eh1p_force_charge_soc");
    ///<summary>Solis S6-EH1P Generator Charging Power</summary>
    public NumberEntity SolisS6Eh1pGeneratorChargingPower => new(_haContext, "number.solis_s6_eh1p_generator_charging_power");
    ///<summary>Solis S6-EH1P Generator Target Power</summary>
    public NumberEntity SolisS6Eh1pGeneratorTargetPower => new(_haContext, "number.solis_s6_eh1p_generator_target_power");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 1)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot1 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 2)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot2 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 3)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot3 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 4)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot4 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 5)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot5 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 6)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot6 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 1)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot1 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 2)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot2 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 3)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot3 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 4)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot4 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 5)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot5 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 6)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot6 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 1)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot1 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 2)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot2 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 3)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot3 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 4)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot4 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 5)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot5 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 6)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot6 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 1)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot1 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 2)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot2 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 3)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot3 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 4)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot4 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 5)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot5 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 6)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot6 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 1)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot1 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 2)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot2 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 3)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot3 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 4)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot4 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 5)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot5 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 6)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot6 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 1)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot1 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 2)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot2 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 3)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot3 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 4)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot4 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 5)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot5 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 6)</summary>
    public NumberEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot6 => new(_haContext, "number.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_6");
    ///<summary>Solis S6-EH1P Max Charge Current</summary>
    public NumberEntity SolisS6Eh1pMaxChargeCurrent => new(_haContext, "number.solis_s6_eh1p_max_charge_current");
    ///<summary>Solis S6-EH1P Max Charge SOC</summary>
    public NumberEntity SolisS6Eh1pMaxChargeSoc => new(_haContext, "number.solis_s6_eh1p_max_charge_soc");
    ///<summary>Solis S6-EH1P Max Discharge Current</summary>
    public NumberEntity SolisS6Eh1pMaxDischargeCurrent => new(_haContext, "number.solis_s6_eh1p_max_discharge_current");
    ///<summary>Solis S6-EH1P Maximum Allowable Percentage of Generator</summary>
    public NumberEntity SolisS6Eh1pMaximumAllowablePercentageOfGenerator => new(_haContext, "number.solis_s6_eh1p_maximum_allowable_percentage_of_generator");
    ///<summary>Solis S6-EH1P MPPT Scanning Interval</summary>
    public NumberEntity SolisS6Eh1pMpptScanningInterval => new(_haContext, "number.solis_s6_eh1p_mppt_scanning_interval");
    ///<summary>Solis S6-EH1P Off-Grid Overdischarge SOC</summary>
    public NumberEntity SolisS6Eh1pOffGridOverdischargeSoc => new(_haContext, "number.solis_s6_eh1p_off_grid_overdischarge_soc");
    ///<summary>Solis S6-EH1P Overdischarge SOC</summary>
    public NumberEntity SolisS6Eh1pOverdischargeSoc => new(_haContext, "number.solis_s6_eh1p_overdischarge_soc");
    ///<summary>Solis S6-EH1P Peak Baseline SOC</summary>
    public NumberEntity SolisS6Eh1pPeakBaselineSoc => new(_haContext, "number.solis_s6_eh1p_peak_baseline_soc");
    ///<summary>Solis S6-EH1P Peak Max Usable Grid Power</summary>
    public NumberEntity SolisS6Eh1pPeakMaxUsableGridPower => new(_haContext, "number.solis_s6_eh1p_peak_max_usable_grid_power");
    ///<summary>Solis S6-EH1P Rated Input Power of Generator</summary>
    public NumberEntity SolisS6Eh1pRatedInputPowerOfGenerator => new(_haContext, "number.solis_s6_eh1p_rated_input_power_of_generator");
    ///<summary>Solis S6-EH1P RC Force Battery Charge Power</summary>
    public NumberEntity SolisS6Eh1pRcForceBatteryChargePower => new(_haContext, "number.solis_s6_eh1p_rc_force_battery_charge_power");
    ///<summary>Solis S6-EH1P RC Force Battery Discharge Power</summary>
    public NumberEntity SolisS6Eh1pRcForceBatteryDischargePower => new(_haContext, "number.solis_s6_eh1p_rc_force_battery_discharge_power");
    ///<summary>Solis S6-EH1P RC Timeout</summary>
    public NumberEntity SolisS6Eh1pRcTimeout => new(_haContext, "number.solis_s6_eh1p_rc_timeout");
    ///<summary>Solis S6-EH1P Time-Charging Charge Current</summary>
    public NumberEntity SolisS6Eh1pTimeChargingChargeCurrent => new(_haContext, "number.solis_s6_eh1p_time_charging_charge_current");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Current</summary>
    public NumberEntity SolisS6Eh1pTimeChargingDischargeCurrent => new(_haContext, "number.solis_s6_eh1p_time_charging_discharge_current");
    ///<summary>Soliscloud Backup SOC</summary>
    public NumberEntity SoliscloudBackupSoc => new(_haContext, "number.soliscloud_backup_soc");
    ///<summary>Soliscloud Force Charge SOC</summary>
    public NumberEntity SoliscloudForceChargeSoc => new(_haContext, "number.soliscloud_force_charge_soc");
    ///<summary>Soliscloud Overdischarge SOC</summary>
    public NumberEntity SoliscloudOverdischargeSoc => new(_haContext, "number.soliscloud_overdischarge_soc");
    ///<summary>Soliscloud Timed Charge Current 1</summary>
    public NumberEntity SoliscloudTimedChargeCurrent1 => new(_haContext, "number.soliscloud_timed_charge_current_1");
    ///<summary>Soliscloud Timed Charge Current 2</summary>
    public NumberEntity SoliscloudTimedChargeCurrent2 => new(_haContext, "number.soliscloud_timed_charge_current_2");
    ///<summary>Soliscloud Timed Charge Current 3</summary>
    public NumberEntity SoliscloudTimedChargeCurrent3 => new(_haContext, "number.soliscloud_timed_charge_current_3");
    ///<summary>Soliscloud Timed Discharge Current 1</summary>
    public NumberEntity SoliscloudTimedDischargeCurrent1 => new(_haContext, "number.soliscloud_timed_discharge_current_1");
    ///<summary>Soliscloud Timed Discharge Current 2</summary>
    public NumberEntity SoliscloudTimedDischargeCurrent2 => new(_haContext, "number.soliscloud_timed_discharge_current_2");
    ///<summary>Soliscloud Timed Discharge Current 3</summary>
    public NumberEntity SoliscloudTimedDischargeCurrent3 => new(_haContext, "number.soliscloud_timed_discharge_current_3");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all person entities currently registered (at runtime) in Home Assistant as PersonEntity</summary>
    public IEnumerable<PersonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("person.")).Select(e => new PersonEntity(e));
    ///<summary>Marleen</summary>
    public PersonEntity Marleen => new(_haContext, "person.marleen");
    ///<summary>Johan</summary>
    public PersonEntity Thuis => new(_haContext, "person.thuis");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all select entities currently registered (at runtime) in Home Assistant as SelectEntity</summary>
    public IEnumerable<SelectEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("select.")).Select(e => new SelectEntity(e));
    ///<summary>RC Force Charge/Discharge</summary>
    public SelectEntity RcForceChargeDischarge => new(_haContext, "select.rc_force_charge_discharge");
    ///<summary>Soliscloud Energy Storage Control Switch</summary>
    public SelectEntity SoliscloudEnergyStorageControlSwitch => new(_haContext, "select.soliscloud_energy_storage_control_switch");
    ///<summary>Work Mode</summary>
    public SelectEntity WorkMode => new(_haContext, "select.work_mode");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));
    ///<summary>Average Power Consumption</summary>
    public SensorEntity AveragePowerConsumption => new(_haContext, "sensor.average_power_consumption");
    ///<summary>Backup Backup Manager state</summary>
    public SensorEntity BackupBackupManagerState => new(_haContext, "sensor.backup_backup_manager_state");
    ///<summary>Backup Last successful automatic backup</summary>
    public SensorEntity BackupLastSuccessfulAutomaticBackup => new(_haContext, "sensor.backup_last_successful_automatic_backup");
    ///<summary>Backup Next scheduled automatic backup</summary>
    public SensorEntity BackupNextScheduledAutomaticBackup => new(_haContext, "sensor.backup_next_scheduled_automatic_backup");
    ///<summary>charger Connectors</summary>
    public SensorEntity ChargerConnectors => new(_haContext, "sensor.charger_connectors");
    ///<summary>charger Error Code</summary>
    public SensorEntity ChargerErrorCode => new(_haContext, "sensor.charger_error_code");
    ///<summary>charger Error Code Connector</summary>
    public SensorEntity ChargerErrorCodeConnector => new(_haContext, "sensor.charger_error_code_connector");
    ///<summary>charger Features</summary>
    public SensorEntity ChargerFeatures => new(_haContext, "sensor.charger_features");
    ///<summary>charger Heartbeat</summary>
    public SensorEntity ChargerHeartbeat => new(_haContext, "sensor.charger_heartbeat");
    ///<summary>charger ID</summary>
    public SensorEntity ChargerId => new(_haContext, "sensor.charger_id");
    ///<summary>charger Id Tag</summary>
    public SensorEntity ChargerIdTag => new(_haContext, "sensor.charger_id_tag");
    ///<summary>charger Model</summary>
    public SensorEntity ChargerModel => new(_haContext, "sensor.charger_model");
    ///<summary>charger Reconnects</summary>
    public SensorEntity ChargerReconnects => new(_haContext, "sensor.charger_reconnects");
    ///<summary>charger Serial</summary>
    public SensorEntity ChargerSerial => new(_haContext, "sensor.charger_serial");
    ///<summary>charger Status</summary>
    public SensorEntity ChargerStatus => new(_haContext, "sensor.charger_status");
    ///<summary>charger Status Connector</summary>
    public SensorEntity ChargerStatusConnector => new(_haContext, "sensor.charger_status_connector");
    ///<summary>charger Stop Reason</summary>
    public SensorEntity ChargerStopReason => new(_haContext, "sensor.charger_stop_reason");
    ///<summary>charger Timestamp Config Response</summary>
    public SensorEntity ChargerTimestampConfigResponse => new(_haContext, "sensor.charger_timestamp_config_response");
    ///<summary>charger Transaction Id</summary>
    public SensorEntity ChargerTransactionId => new(_haContext, "sensor.charger_transaction_id");
    ///<summary>charger Vendor</summary>
    public SensorEntity ChargerVendor => new(_haContext, "sensor.charger_vendor");
    ///<summary>charger Version Firmware</summary>
    public SensorEntity ChargerVersionFirmware => new(_haContext, "sensor.charger_version_firmware");
    ///<summary>Electricity Meter Actief tarief</summary>
    public SensorEntity ElectricityMeterActiefTarief => new(_haContext, "sensor.electricity_meter_actief_tarief");
    ///<summary>ID.3 Pro Performance Auto Unlock Plug When Charged</summary>
    public SensorEntity Id3ProPerformanceAutoUnlockPlugWhenCharged => new(_haContext, "sensor.id_3_pro_performance_auto_unlock_plug_when_charged");
    ///<summary>ID.3 Pro Performance Auto Unlock Plug When Charged AC</summary>
    public SensorEntity Id3ProPerformanceAutoUnlockPlugWhenChargedAc => new(_haContext, "sensor.id_3_pro_performance_auto_unlock_plug_when_charged_ac");
    ///<summary>ID.3 Pro Performance Bonnet Lock Status</summary>
    public SensorEntity Id3ProPerformanceBonnetLockStatus => new(_haContext, "sensor.id_3_pro_performance_bonnet_lock_status");
    ///<summary>ID.3 Pro Performance Bonnet Open Status</summary>
    public SensorEntity Id3ProPerformanceBonnetOpenStatus => new(_haContext, "sensor.id_3_pro_performance_bonnet_open_status");
    ///<summary>ID.3 Pro Performance Car Type</summary>
    public SensorEntity Id3ProPerformanceCarType => new(_haContext, "sensor.id_3_pro_performance_car_type");
    ///<summary>ID.3 Pro Performance Charge Type</summary>
    public SensorEntity Id3ProPerformanceChargeType => new(_haContext, "sensor.id_3_pro_performance_charge_type");
    ///<summary>ID.3 Pro Performance Charging Mode</summary>
    public SensorEntity Id3ProPerformanceChargingMode => new(_haContext, "sensor.id_3_pro_performance_charging_mode");
    ///<summary>ID.3 Pro Performance Charging Settings</summary>
    public SensorEntity Id3ProPerformanceChargingSettings => new(_haContext, "sensor.id_3_pro_performance_charging_settings");
    ///<summary>ID.3 Pro Performance Charging State</summary>
    public SensorEntity Id3ProPerformanceChargingState => new(_haContext, "sensor.id_3_pro_performance_charging_state");
    ///<summary>ID.3 Pro Performance Climatisation State</summary>
    public SensorEntity Id3ProPerformanceClimatisationState => new(_haContext, "sensor.id_3_pro_performance_climatisation_state");
    ///<summary>ID.3 Pro Performance Door Front Left Lock Status</summary>
    public SensorEntity Id3ProPerformanceDoorFrontLeftLockStatus => new(_haContext, "sensor.id_3_pro_performance_door_front_left_lock_status");
    ///<summary>ID.3 Pro Performance Door Front Left Open Status</summary>
    public SensorEntity Id3ProPerformanceDoorFrontLeftOpenStatus => new(_haContext, "sensor.id_3_pro_performance_door_front_left_open_status");
    ///<summary>ID.3 Pro Performance Door Front Right Lock Status</summary>
    public SensorEntity Id3ProPerformanceDoorFrontRightLockStatus => new(_haContext, "sensor.id_3_pro_performance_door_front_right_lock_status");
    ///<summary>ID.3 Pro Performance Door Front Right Open Status</summary>
    public SensorEntity Id3ProPerformanceDoorFrontRightOpenStatus => new(_haContext, "sensor.id_3_pro_performance_door_front_right_open_status");
    ///<summary>ID.3 Pro Performance Door Lock Status</summary>
    public SensorEntity Id3ProPerformanceDoorLockStatus => new(_haContext, "sensor.id_3_pro_performance_door_lock_status");
    ///<summary>ID.3 Pro Performance Door Rear Left Lock Status</summary>
    public SensorEntity Id3ProPerformanceDoorRearLeftLockStatus => new(_haContext, "sensor.id_3_pro_performance_door_rear_left_lock_status");
    ///<summary>ID.3 Pro Performance Door Rear Left Open Status</summary>
    public SensorEntity Id3ProPerformanceDoorRearLeftOpenStatus => new(_haContext, "sensor.id_3_pro_performance_door_rear_left_open_status");
    ///<summary>ID.3 Pro Performance Door Rear Right Lock Status</summary>
    public SensorEntity Id3ProPerformanceDoorRearRightLockStatus => new(_haContext, "sensor.id_3_pro_performance_door_rear_right_lock_status");
    ///<summary>ID.3 Pro Performance Door Rear Right Open Status</summary>
    public SensorEntity Id3ProPerformanceDoorRearRightOpenStatus => new(_haContext, "sensor.id_3_pro_performance_door_rear_right_open_status");
    ///<summary>ID.3 Pro Performance Max Charge Current AC</summary>
    public SensorEntity Id3ProPerformanceMaxChargeCurrentAc => new(_haContext, "sensor.id_3_pro_performance_max_charge_current_ac");
    ///<summary>ID.3 Pro Performance Overall Status</summary>
    public SensorEntity Id3ProPerformanceOverallStatus => new(_haContext, "sensor.id_3_pro_performance_overall_status");
    ///<summary>ID.3 Pro Performance Plug Connection State</summary>
    public SensorEntity Id3ProPerformancePlugConnectionState => new(_haContext, "sensor.id_3_pro_performance_plug_connection_state");
    ///<summary>ID.3 Pro Performance Plug Lock State</summary>
    public SensorEntity Id3ProPerformancePlugLockState => new(_haContext, "sensor.id_3_pro_performance_plug_lock_state");
    ///<summary>ID.3 Pro Performance Sunroof Cover Status</summary>
    public SensorEntity Id3ProPerformanceSunroofCoverStatus => new(_haContext, "sensor.id_3_pro_performance_sunroof_cover_status");
    ///<summary>ID.3 Pro Performance Sunroof Open Status</summary>
    public SensorEntity Id3ProPerformanceSunroofOpenStatus => new(_haContext, "sensor.id_3_pro_performance_sunroof_open_status");
    ///<summary>ID.3 Pro Performance Trunk Lock Status</summary>
    public SensorEntity Id3ProPerformanceTrunkLockStatus => new(_haContext, "sensor.id_3_pro_performance_trunk_lock_status");
    ///<summary>ID.3 Pro Performance Trunk Open Status</summary>
    public SensorEntity Id3ProPerformanceTrunkOpenStatus => new(_haContext, "sensor.id_3_pro_performance_trunk_open_status");
    ///<summary>ID.3 Pro Performance Unit In car</summary>
    public SensorEntity Id3ProPerformanceUnitInCar => new(_haContext, "sensor.id_3_pro_performance_unit_in_car");
    ///<summary>ID.3 Pro Performance Window Front Left Open Status</summary>
    public SensorEntity Id3ProPerformanceWindowFrontLeftOpenStatus => new(_haContext, "sensor.id_3_pro_performance_window_front_left_open_status");
    ///<summary>ID.3 Pro Performance Window Front Right Open Status</summary>
    public SensorEntity Id3ProPerformanceWindowFrontRightOpenStatus => new(_haContext, "sensor.id_3_pro_performance_window_front_right_open_status");
    ///<summary>ID.3 Pro Performance Window Rear Left Open Status</summary>
    public SensorEntity Id3ProPerformanceWindowRearLeftOpenStatus => new(_haContext, "sensor.id_3_pro_performance_window_rear_left_open_status");
    ///<summary>ID.3 Pro Performance Window Rear Right Open Status</summary>
    public SensorEntity Id3ProPerformanceWindowRearRightOpenStatus => new(_haContext, "sensor.id_3_pro_performance_window_rear_right_open_status");
    ///<summary>OneDrive Schijfstatus</summary>
    public SensorEntity OnedriveSchijfstatus => new(_haContext, "sensor.onedrive_schijfstatus");
    ///<summary>solaredge_local Status</summary>
    public SensorEntity SolaredgeLocalStatus => new(_haContext, "sensor.solaredge_local_status");
    ///<summary>solaredge_local Status Vendor</summary>
    public SensorEntity SolaredgeLocalStatusVendor => new(_haContext, "sensor.solaredge_local_status_vendor");
    ///<summary>Solis S6-EH1P Battery Current Direction</summary>
    public SensorEntity SolisS6Eh1pBatteryCurrentDirection => new(_haContext, "sensor.solis_s6_eh1p_battery_current_direction");
    ///<summary>Solis S6-EH1P Battery Fault Status 1 (BMS)</summary>
    public SensorEntity SolisS6Eh1pBatteryFaultStatus1Bms => new(_haContext, "sensor.solis_s6_eh1p_battery_fault_status_1_bms");
    ///<summary>Solis S6-EH1P Battery Fault Status 2 (BMS)</summary>
    public SensorEntity SolisS6Eh1pBatteryFaultStatus2Bms => new(_haContext, "sensor.solis_s6_eh1p_battery_fault_status_2_bms");
    ///<summary>Solis S6-EH1P Battery Force Charge Source</summary>
    public SensorEntity SolisS6Eh1pBatteryForceChargeSource => new(_haContext, "sensor.solis_s6_eh1p_battery_force_charge_source");
    ///<summary>Solis S6-EH1P DSP Version</summary>
    public SensorEntity SolisS6Eh1pDspVersion => new(_haContext, "sensor.solis_s6_eh1p_dsp_version");
    ///<summary>Solis S6-EH1P Flexible Export Enabling Switch</summary>
    public SensorEntity SolisS6Eh1pFlexibleExportEnablingSwitch => new(_haContext, "sensor.solis_s6_eh1p_flexible_export_enabling_switch");
    ///<summary>Solis S6-EH1P Forced Start of Generator</summary>
    public SensorEntity SolisS6Eh1pForcedStartOfGenerator => new(_haContext, "sensor.solis_s6_eh1p_forced_start_of_generator");
    ///<summary>Solis S6-EH1P Generator charging switch</summary>
    public SensorEntity SolisS6Eh1pGeneratorChargingSwitch => new(_haContext, "sensor.solis_s6_eh1p_generator_charging_switch");
    ///<summary>Solis S6-EH1P Generator Forced Stop of Generator</summary>
    public SensorEntity SolisS6Eh1pGeneratorForcedStopOfGenerator => new(_haContext, "sensor.solis_s6_eh1p_generator_forced_stop_of_generator");
    ///<summary>Solis S6-EH1P Generator Set Enable Switch</summary>
    public SensorEntity SolisS6Eh1pGeneratorSetEnableSwitch => new(_haContext, "sensor.solis_s6_eh1p_generator_set_enable_switch");
    ///<summary>Solis S6-EH1P Generator Setting Switch</summary>
    public SensorEntity SolisS6Eh1pGeneratorSettingSwitch => new(_haContext, "sensor.solis_s6_eh1p_generator_setting_switch");
    ///<summary>Solis S6-EH1P HMI Version</summary>
    public SensorEntity SolisS6Eh1pHmiVersion => new(_haContext, "sensor.solis_s6_eh1p_hmi_version");
    ///<summary>Solis S6-EH1P Hybrid Function Control</summary>
    public SensorEntity SolisS6Eh1pHybridFunctionControl => new(_haContext, "sensor.solis_s6_eh1p_hybrid_function_control");
    ///<summary>Solis S6-EH1P Inverter Type Definition</summary>
    public SensorEntity SolisS6Eh1pInverterTypeDefinition => new(_haContext, "sensor.solis_s6_eh1p_inverter_type_definition");
    ///<summary>Solis S6-EH1P Last Modbus Success</summary>
    public SensorEntity SolisS6Eh1pLastModbusSuccess => new(_haContext, "sensor.solis_s6_eh1p_last_modbus_success");
    ///<summary>Solis S6-EH1P Model No</summary>
    public SensorEntity SolisS6Eh1pModelNo => new(_haContext, "sensor.solis_s6_eh1p_model_no");
    ///<summary>Solis S6-EH1P Protocol Version</summary>
    public SensorEntity SolisS6Eh1pProtocolVersion => new(_haContext, "sensor.solis_s6_eh1p_protocol_version");
    ///<summary>Solis S6-EH1P RC Force Battery Charge/discharge</summary>
    public SensorEntity SolisS6Eh1pRcForceBatteryChargeDischarge => new(_haContext, "sensor.solis_s6_eh1p_rc_force_battery_charge_discharge");
    ///<summary>Solis S6-EH1P Serial Number</summary>
    public SensorEntity SolisS6Eh1pSerialNumber => new(_haContext, "sensor.solis_s6_eh1p_serial_number");
    ///<summary>Solis S6-EH1P Special Settings</summary>
    public SensorEntity SolisS6Eh1pSpecialSettings => new(_haContext, "sensor.solis_s6_eh1p_special_settings");
    ///<summary>Solis S6-EH1P Status</summary>
    public SensorEntity SolisS6Eh1pStatus => new(_haContext, "sensor.solis_s6_eh1p_status");
    ///<summary>Solis S6-EH1P Status String</summary>
    public SensorEntity SolisS6Eh1pStatusString => new(_haContext, "sensor.solis_s6_eh1p_status_string");
    ///<summary>Solis S6-EH1P Storage control Switch value</summary>
    public SensorEntity SolisS6Eh1pStorageControlSwitchValue => new(_haContext, "sensor.solis_s6_eh1p_storage_control_switch_value");
    ///<summary>Solis S6-EH1P Storage Control Switching Value</summary>
    public SensorEntity SolisS6Eh1pStorageControlSwitchingValue => new(_haContext, "sensor.solis_s6_eh1p_storage_control_switching_value");
    ///<summary>Solis S6-EH1P Time of Use V2 Switch</summary>
    public SensorEntity SolisS6Eh1pTimeOfUseV2Switch => new(_haContext, "sensor.solis_s6_eh1p_time_of_use_v2_switch");
    ///<summary>SolisCloud Power State</summary>
    public SensorEntity SoliscloudPowerState => new(_haContext, "sensor.soliscloud_power_state");
    ///<summary>SolisCloud State</summary>
    public SensorEntity SoliscloudState => new(_haContext, "sensor.soliscloud_state");
    ///<summary>System Monitor Load (1 min)</summary>
    public SensorEntity SystemMonitorLoad1m => new(_haContext, "sensor.system_monitor_load_1m");
    ///<summary>tablet Johan  Battery state</summary>
    public SensorEntity TabletJohanBatteryState => new(_haContext, "sensor.tablet_johan_battery_state");
    ///<summary>tablet Johan  Charger type</summary>
    public SensorEntity TabletJohanChargerType => new(_haContext, "sensor.tablet_johan_charger_type");
    ///<summary>Thuis Automatic geofencing</summary>
    public SensorEntity ThuisAutomaticGeofencing => new(_haContext, "sensor.thuis_automatic_geofencing");
    ///<summary>Thuis Geofencing mode</summary>
    public SensorEntity ThuisGeofencingMode => new(_haContext, "sensor.thuis_geofencing_mode");
    ///<summary>Thuis Tado mode</summary>
    public SensorEntity ThuisTadoMode => new(_haContext, "sensor.thuis_tado_mode");
    ///<summary>Thuis Weather condition</summary>
    public SensorEntity ThuisWeatherCondition => new(_haContext, "sensor.thuis_weather_condition");
    ///<summary>Verwarming Tado mode</summary>
    public SensorEntity VerwarmingTadoMode => new(_haContext, "sensor.verwarming_tado_mode");
    ///<summary>aircoliving Compressor energieverbruik</summary>
    public NumericSensorEntity AircolivingCompressorEnergyConsumption => new(_haContext, "sensor.aircoliving_compressor_energy_consumption");
    ///<summary>aircoliving Compressor geschat energieverbruik</summary>
    public NumericSensorEntity AircolivingCompressorEstimatedPowerConsumption => new(_haContext, "sensor.aircoliving_compressor_estimated_power_consumption");
    ///<summary>aircoliving Koelen energieverbruik</summary>
    public NumericSensorEntity AircolivingCoolEnergyConsumption => new(_haContext, "sensor.aircoliving_cool_energy_consumption");
    ///<summary>aircoliving Energieverbruik</summary>
    public NumericSensorEntity AircolivingEnergyConsumption => new(_haContext, "sensor.aircoliving_energy_consumption");
    ///<summary>aircoliving Warmte energieverbruik</summary>
    public NumericSensorEntity AircolivingHeatEnergyConsumption => new(_haContext, "sensor.aircoliving_heat_energy_consumption");
    ///<summary>aircoliving Binnentemperatuur</summary>
    public NumericSensorEntity AircolivingInsideTemperature => new(_haContext, "sensor.aircoliving_inside_temperature");
    ///<summary>aircoliving Buitentemperatuur</summary>
    public NumericSensorEntity AircolivingOutsideTemperature => new(_haContext, "sensor.aircoliving_outside_temperature");
    ///<summary>charger Current Import</summary>
    public NumericSensorEntity ChargerCurrentImport => new(_haContext, "sensor.charger_current_import");
    ///<summary>charger Current Offered</summary>
    public NumericSensorEntity ChargerCurrentOffered => new(_haContext, "sensor.charger_current_offered");
    ///<summary>charger Energy Session</summary>
    public NumericSensorEntity ChargerEnergySession => new(_haContext, "sensor.charger_energy_session");
    ///<summary>charger Latency Ping</summary>
    public NumericSensorEntity ChargerLatencyPing => new(_haContext, "sensor.charger_latency_ping");
    ///<summary>charger Latency Pong</summary>
    public NumericSensorEntity ChargerLatencyPong => new(_haContext, "sensor.charger_latency_pong");
    ///<summary>charger Power Active Import</summary>
    public NumericSensorEntity ChargerPowerActiveImport => new(_haContext, "sensor.charger_power_active_import");
    ///<summary>charger Voltage</summary>
    public NumericSensorEntity ChargerVoltage => new(_haContext, "sensor.charger_voltage");
    ///<summary>CPU Temperature</summary>
    public NumericSensorEntity CpuTemperature => new(_haContext, "sensor.cpu_temperature");
    ///<summary>Electricity Meter Energieproductie</summary>
    public NumericSensorEntity ElectricityMeterEnergieproductie => new(_haContext, "sensor.electricity_meter_energieproductie");
    ///<summary>Electricity Meter Energieproductie (tarief 1)</summary>
    public NumericSensorEntity ElectricityMeterEnergieproductieTarief1 => new(_haContext, "sensor.electricity_meter_energieproductie_tarief_1");
    ///<summary>sensor Compensation</summary>
    public NumericSensorEntity ElectricityMeterEnergieproductieTarief1Compensation => new(_haContext, "sensor.electricity_meter_energieproductie_tarief_1_compensation");
    ///<summary>Electricity Meter Energieproductie (tarief 2)</summary>
    public NumericSensorEntity ElectricityMeterEnergieproductieTarief2 => new(_haContext, "sensor.electricity_meter_energieproductie_tarief_2");
    ///<summary>sensor Compensation</summary>
    public NumericSensorEntity ElectricityMeterEnergieproductieTarief2Compensation => new(_haContext, "sensor.electricity_meter_energieproductie_tarief_2_compensation");
    public NumericSensorEntity ElectricityMeterEnergieproductieTarief2Cost => new(_haContext, "sensor.electricity_meter_energieproductie_tarief_2_cost");
    ///<summary>Electricity Meter Energieverbruik</summary>
    public NumericSensorEntity ElectricityMeterEnergieverbruik => new(_haContext, "sensor.electricity_meter_energieverbruik");
    ///<summary>Electricity Meter Energieverbruik (tarief 1)</summary>
    public NumericSensorEntity ElectricityMeterEnergieverbruikTarief1 => new(_haContext, "sensor.electricity_meter_energieverbruik_tarief_1");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity ElectricityMeterEnergieverbruikTarief1Cost => new(_haContext, "sensor.electricity_meter_energieverbruik_tarief_1_cost");
    ///<summary>Electricity Meter Energieverbruik (tarief 2)</summary>
    public NumericSensorEntity ElectricityMeterEnergieverbruikTarief2 => new(_haContext, "sensor.electricity_meter_energieverbruik_tarief_2");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity ElectricityMeterEnergieverbruikTarief2Cost => new(_haContext, "sensor.electricity_meter_energieverbruik_tarief_2_cost");
    ///<summary>Electricity Meter Huidig gemiddelde vraag</summary>
    public NumericSensorEntity ElectricityMeterHuidigGemiddeldeVraag => new(_haContext, "sensor.electricity_meter_huidig_gemiddelde_vraag");
    ///<summary>Electricity Meter Maximale vraag huidige maand</summary>
    public NumericSensorEntity ElectricityMeterMaximaleVraagHuidigeMaand => new(_haContext, "sensor.electricity_meter_maximale_vraag_huidige_maand");
    ///<summary>Electricity Meter Spanning fase L1</summary>
    public NumericSensorEntity ElectricityMeterSpanningFaseL1 => new(_haContext, "sensor.electricity_meter_spanning_fase_l1");
    ///<summary>Gas Meter Gasverbruik</summary>
    public NumericSensorEntity GasMeterGasverbruik => new(_haContext, "sensor.gas_meter_gasverbruik");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity GasMeterGasverbruikCost => new(_haContext, "sensor.gas_meter_gasverbruik_cost");
    ///<summary>Home Assistant Core CPU-percentage</summary>
    public NumericSensorEntity HomeAssistantCoreCpuPercent => new(_haContext, "sensor.home_assistant_core_cpu_percent");
    ///<summary>Home Assistant Host Schijfruimte vrij</summary>
    public NumericSensorEntity HomeAssistantHostDiskFree => new(_haContext, "sensor.home_assistant_host_disk_free");
    ///<summary>Home Assistant Supervisor CPU-percentage</summary>
    public NumericSensorEntity HomeAssistantSupervisorCpuPercent => new(_haContext, "sensor.home_assistant_supervisor_cpu_percent");
    ///<summary>ID.3 Pro Performance Charge Power</summary>
    public NumericSensorEntity Id3ProPerformanceChargePower => new(_haContext, "sensor.id_3_pro_performance_charge_power");
    ///<summary>ID.3 Pro Performance Charge Rate</summary>
    public NumericSensorEntity Id3ProPerformanceChargeRate => new(_haContext, "sensor.id_3_pro_performance_charge_rate");
    ///<summary>ID.3 Pro Performance Fuel Level</summary>
    public NumericSensorEntity Id3ProPerformanceFuelLevel => new(_haContext, "sensor.id_3_pro_performance_fuel_level");
    ///<summary>ID.3 Pro Performance Gasoline Range</summary>
    public NumericSensorEntity Id3ProPerformanceGasolineRange => new(_haContext, "sensor.id_3_pro_performance_gasoline_range");
    ///<summary>ID.3 Pro Performance Health Inspection</summary>
    public NumericSensorEntity Id3ProPerformanceHealthInspection => new(_haContext, "sensor.id_3_pro_performance_health_inspection");
    ///<summary>ID.3 Pro Performance Health Inspection km</summary>
    public NumericSensorEntity Id3ProPerformanceHealthInspectionKm => new(_haContext, "sensor.id_3_pro_performance_health_inspection_km");
    ///<summary>ID.3 Pro Performance HV Battery Temperature Max</summary>
    public NumericSensorEntity Id3ProPerformanceHvBatteryTemperatureMax => new(_haContext, "sensor.id_3_pro_performance_hv_battery_temperature_max");
    ///<summary>ID.3 Pro Performance HV Battery Temperature Min</summary>
    public NumericSensorEntity Id3ProPerformanceHvBatteryTemperatureMin => new(_haContext, "sensor.id_3_pro_performance_hv_battery_temperature_min");
    ///<summary>ID.3 Pro Performance Last Trip Average Electric consumption</summary>
    public NumericSensorEntity Id3ProPerformanceLastTripAverageElectricConsumption => new(_haContext, "sensor.id_3_pro_performance_last_trip_average_electric_consumption");
    ///<summary>ID.3 Pro Performance Last Trip Average Fuel consumption</summary>
    public NumericSensorEntity Id3ProPerformanceLastTripAverageFuelConsumption => new(_haContext, "sensor.id_3_pro_performance_last_trip_average_fuel_consumption");
    ///<summary>ID.3 Pro Performance Odometer</summary>
    public NumericSensorEntity Id3ProPerformanceOdometer => new(_haContext, "sensor.id_3_pro_performance_odometer");
    ///<summary>ID.3 Pro Performance Oil Inspection days</summary>
    public NumericSensorEntity Id3ProPerformanceOilInspectionDays => new(_haContext, "sensor.id_3_pro_performance_oil_inspection_days");
    ///<summary>ID.3 Pro Performance Oil Inspection km</summary>
    public NumericSensorEntity Id3ProPerformanceOilInspectionKm => new(_haContext, "sensor.id_3_pro_performance_oil_inspection_km");
    ///<summary>ID.3 Pro Performance Range</summary>
    public NumericSensorEntity Id3ProPerformanceRange => new(_haContext, "sensor.id_3_pro_performance_range");
    ///<summary>ID.3 Pro Performance Remaining Charging Time</summary>
    public NumericSensorEntity Id3ProPerformanceRemainingChargingTime => new(_haContext, "sensor.id_3_pro_performance_remaining_charging_time");
    ///<summary>ID.3 Pro Performance Remaining Climatisation Time</summary>
    public NumericSensorEntity Id3ProPerformanceRemainingClimatisationTime => new(_haContext, "sensor.id_3_pro_performance_remaining_climatisation_time");
    ///<summary>ID.3 Pro Performance State of Charge</summary>
    public NumericSensorEntity Id3ProPerformanceStateOfCharge => new(_haContext, "sensor.id_3_pro_performance_state_of_charge");
    ///<summary>ID.3 Pro Performance Target State of Charge</summary>
    public NumericSensorEntity Id3ProPerformanceTargetStateOfCharge => new(_haContext, "sensor.id_3_pro_performance_target_state_of_charge");
    ///<summary>ID.3 Pro Performance Target Temperature</summary>
    public NumericSensorEntity Id3ProPerformanceTargetTemperature => new(_haContext, "sensor.id_3_pro_performance_target_temperature");
    ///<summary>OneDrive Gebruikte opslag</summary>
    public NumericSensorEntity OnedriveGebruikteOpslag => new(_haContext, "sensor.onedrive_gebruikte_opslag");
    ///<summary>OneDrive Resterende opslag</summary>
    public NumericSensorEntity OnedriveResterendeOpslag => new(_haContext, "sensor.onedrive_resterende_opslag");
    ///<summary>solaredge Huidig vermogen</summary>
    public NumericSensorEntity SolaredgeCurrentPower => new(_haContext, "sensor.solaredge_current_power");
    ///<summary>solaredge Lifetime energy</summary>
    public NumericSensorEntity SolaredgeLifetimeEnergy => new(_haContext, "sensor.solaredge_lifetime_energy");
    ///<summary>solaredge_local AC Current</summary>
    public NumericSensorEntity SolaredgeLocalAcCurrent => new(_haContext, "sensor.solaredge_local_ac_current");
    ///<summary>solaredge_local AC Current A</summary>
    public NumericSensorEntity SolaredgeLocalAcCurrentA => new(_haContext, "sensor.solaredge_local_ac_current_a");
    ///<summary>solaredge_local AC Current B</summary>
    public NumericSensorEntity SolaredgeLocalAcCurrentB => new(_haContext, "sensor.solaredge_local_ac_current_b");
    ///<summary>solaredge_local AC Current C</summary>
    public NumericSensorEntity SolaredgeLocalAcCurrentC => new(_haContext, "sensor.solaredge_local_ac_current_c");
    ///<summary>solaredge_local AC Energy kWh</summary>
    public NumericSensorEntity SolaredgeLocalAcEnergyKwh => new(_haContext, "sensor.solaredge_local_ac_energy_kwh");
    ///<summary>solaredge_local AC Frequency</summary>
    public NumericSensorEntity SolaredgeLocalAcFrequency => new(_haContext, "sensor.solaredge_local_ac_frequency");
    ///<summary>solaredge_local AC PF</summary>
    public NumericSensorEntity SolaredgeLocalAcPf => new(_haContext, "sensor.solaredge_local_ac_pf");
    ///<summary>solaredge_local AC Power</summary>
    public NumericSensorEntity SolaredgeLocalAcPower => new(_haContext, "sensor.solaredge_local_ac_power");
    ///<summary>solaredge_local AC VA</summary>
    public NumericSensorEntity SolaredgeLocalAcVa => new(_haContext, "sensor.solaredge_local_ac_va");
    ///<summary>solaredge_local AC VAR</summary>
    public NumericSensorEntity SolaredgeLocalAcVar => new(_haContext, "sensor.solaredge_local_ac_var");
    ///<summary>solaredge_local AC Voltage AB</summary>
    public NumericSensorEntity SolaredgeLocalAcVoltageAb => new(_haContext, "sensor.solaredge_local_ac_voltage_ab");
    ///<summary>solaredge_local AC Voltage AN</summary>
    public NumericSensorEntity SolaredgeLocalAcVoltageAn => new(_haContext, "sensor.solaredge_local_ac_voltage_an");
    ///<summary>solaredge_local AC Voltage BC</summary>
    public NumericSensorEntity SolaredgeLocalAcVoltageBc => new(_haContext, "sensor.solaredge_local_ac_voltage_bc");
    ///<summary>solaredge_local AC Voltage BN</summary>
    public NumericSensorEntity SolaredgeLocalAcVoltageBn => new(_haContext, "sensor.solaredge_local_ac_voltage_bn");
    ///<summary>solaredge_local AC Voltage CA</summary>
    public NumericSensorEntity SolaredgeLocalAcVoltageCa => new(_haContext, "sensor.solaredge_local_ac_voltage_ca");
    ///<summary>solaredge_local AC Voltage CN</summary>
    public NumericSensorEntity SolaredgeLocalAcVoltageCn => new(_haContext, "sensor.solaredge_local_ac_voltage_cn");
    ///<summary>solaredge_local DC Current</summary>
    public NumericSensorEntity SolaredgeLocalDcCurrent => new(_haContext, "sensor.solaredge_local_dc_current");
    ///<summary>solaredge_local DC Power</summary>
    public NumericSensorEntity SolaredgeLocalDcPower => new(_haContext, "sensor.solaredge_local_dc_power");
    ///<summary>solaredge_local DC Voltage</summary>
    public NumericSensorEntity SolaredgeLocalDcVoltage => new(_haContext, "sensor.solaredge_local_dc_voltage");
    ///<summary>solaredge_local Temp Sink</summary>
    public NumericSensorEntity SolaredgeLocalTempSink => new(_haContext, "sensor.solaredge_local_temp_sink");
    ///<summary>Solis S6-EH1P A Phase Current</summary>
    public NumericSensorEntity SolisS6Eh1pAPhaseCurrent => new(_haContext, "sensor.solis_s6_eh1p_a_phase_current");
    ///<summary>Solis S6-EH1P A Phase Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pAPhaseVoltage => new(_haContext, "sensor.solis_s6_eh1p_a_phase_voltage");
    ///<summary>Solis S6-EH1P AC Grid Port Power</summary>
    public NumericSensorEntity SolisS6Eh1pAcGridPortPower => new(_haContext, "sensor.solis_s6_eh1p_ac_grid_port_power");
    ///<summary>Solis S6-EH1P Active Power</summary>
    public NumericSensorEntity SolisS6Eh1pActivePower => new(_haContext, "sensor.solis_s6_eh1p_active_power");
    ///<summary>Solis S6-EH1P Apparent Power</summary>
    public NumericSensorEntity SolisS6Eh1pApparentPower => new(_haContext, "sensor.solis_s6_eh1p_apparent_power");
    ///<summary>Solis S6-EH1P B Phase Current</summary>
    public NumericSensorEntity SolisS6Eh1pBPhaseCurrent => new(_haContext, "sensor.solis_s6_eh1p_b_phase_current");
    ///<summary>Solis S6-EH1P B Phase Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pBPhaseVoltage => new(_haContext, "sensor.solis_s6_eh1p_b_phase_voltage");
    ///<summary>Solis S6-EH1P Backup AC Current Phase A</summary>
    public NumericSensorEntity SolisS6Eh1pBackupAcCurrentPhaseA => new(_haContext, "sensor.solis_s6_eh1p_backup_ac_current_phase_a");
    ///<summary>Solis S6-EH1P Backup AC Voltage Phase A</summary>
    public NumericSensorEntity SolisS6Eh1pBackupAcVoltagePhaseA => new(_haContext, "sensor.solis_s6_eh1p_backup_ac_voltage_phase_a");
    ///<summary>Solis S6-EH1P Backup Load Month Energy</summary>
    public NumericSensorEntity SolisS6Eh1pBackupLoadMonthEnergy => new(_haContext, "sensor.solis_s6_eh1p_backup_load_month_energy");
    ///<summary>Solis S6-EH1P Backup Load power</summary>
    public NumericSensorEntity SolisS6Eh1pBackupLoadPower => new(_haContext, "sensor.solis_s6_eh1p_backup_load_power");
    ///<summary>Solis S6-EH1P Backup Load Today Energy</summary>
    public NumericSensorEntity SolisS6Eh1pBackupLoadTodayEnergy => new(_haContext, "sensor.solis_s6_eh1p_backup_load_today_energy");
    ///<summary>Solis S6-EH1P Backup Load Total Energy</summary>
    public NumericSensorEntity SolisS6Eh1pBackupLoadTotalEnergy => new(_haContext, "sensor.solis_s6_eh1p_backup_load_total_energy");
    ///<summary>Solis S6-EH1P Backup Load Year Energy</summary>
    public NumericSensorEntity SolisS6Eh1pBackupLoadYearEnergy => new(_haContext, "sensor.solis_s6_eh1p_backup_load_year_energy");
    ///<summary>Solis S6-EH1P Backup SOC</summary>
    public NumericSensorEntity SolisS6Eh1pBackupSoc => new(_haContext, "sensor.solis_s6_eh1p_backup_soc");
    ///<summary>Solis S6-EH1P Battery Charge Current Limitation (BMS)</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryChargeCurrentLimitationBms => new(_haContext, "sensor.solis_s6_eh1p_battery_charge_current_limitation_bms");
    ///<summary>Solis S6-EH1P Battery Charge Limit Power</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryChargeLimitPower => new(_haContext, "sensor.solis_s6_eh1p_battery_charge_limit_power");
    ///<summary>Solis S6-EH1P Battery Charge Power</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryChargePower => new(_haContext, "sensor.solis_s6_eh1p_battery_charge_power");
    ///<summary>Solis S6-EH1P Battery Current</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryCurrent => new(_haContext, "sensor.solis_s6_eh1p_battery_current");
    ///<summary>Solis S6-EH1P Battery Current (BMS)</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryCurrentBms => new(_haContext, "sensor.solis_s6_eh1p_battery_current_bms");
    ///<summary>Solis S6-EH1P Battery Discharge Current Limitation (BMS)</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryDischargeCurrentLimitationBms => new(_haContext, "sensor.solis_s6_eh1p_battery_discharge_current_limitation_bms");
    ///<summary>Solis S6-EH1P Battery Discharge Limit Power</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryDischargeLimitPower => new(_haContext, "sensor.solis_s6_eh1p_battery_discharge_limit_power");
    ///<summary>Solis S6-EH1P Battery Discharge Power</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryDischargePower => new(_haContext, "sensor.solis_s6_eh1p_battery_discharge_power");
    ///<summary>Solis S6-EH1P Battery Force-charge Power Limitation</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryForceChargePowerLimitation => new(_haContext, "sensor.solis_s6_eh1p_battery_force_charge_power_limitation");
    ///<summary>Solis S6-EH1P Battery Max Charge Current</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryMaxChargeCurrent => new(_haContext, "sensor.solis_s6_eh1p_battery_max_charge_current");
    ///<summary>Solis S6-EH1P Battery Max Discharge Current</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryMaxDischargeCurrent => new(_haContext, "sensor.solis_s6_eh1p_battery_max_discharge_current");
    ///<summary>Solis S6-EH1P Battery Power</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryPower => new(_haContext, "sensor.solis_s6_eh1p_battery_power");
    ///<summary>Solis S6-EH1P Battery SOC</summary>
    public NumericSensorEntity SolisS6Eh1pBatterySoc => new(_haContext, "sensor.solis_s6_eh1p_battery_soc");
    ///<summary>Solis S6-EH1P Battery SOH</summary>
    public NumericSensorEntity SolisS6Eh1pBatterySoh => new(_haContext, "sensor.solis_s6_eh1p_battery_soh");
    ///<summary>Solis S6-EH1P Battery Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryVoltage => new(_haContext, "sensor.solis_s6_eh1p_battery_voltage");
    ///<summary>Solis S6-EH1P Battery Voltage (BMS)</summary>
    public NumericSensorEntity SolisS6Eh1pBatteryVoltageBms => new(_haContext, "sensor.solis_s6_eh1p_battery_voltage_bms");
    ///<summary>Solis S6-EH1P C Phase Current</summary>
    public NumericSensorEntity SolisS6Eh1pCPhaseCurrent => new(_haContext, "sensor.solis_s6_eh1p_c_phase_current");
    ///<summary>Solis S6-EH1P C Phase Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pCPhaseVoltage => new(_haContext, "sensor.solis_s6_eh1p_c_phase_voltage");
    ///<summary>Solis S6-EH1P Clock (Hours)</summary>
    public NumericSensorEntity SolisS6Eh1pClockHours => new(_haContext, "sensor.solis_s6_eh1p_clock_hours");
    ///<summary>Solis S6-EH1P Clock (Minutes)</summary>
    public NumericSensorEntity SolisS6Eh1pClockMinutes => new(_haContext, "sensor.solis_s6_eh1p_clock_minutes");
    ///<summary>Solis S6-EH1P Clock (Seconds)</summary>
    public NumericSensorEntity SolisS6Eh1pClockSeconds => new(_haContext, "sensor.solis_s6_eh1p_clock_seconds");
    ///<summary>Solis S6-EH1P Flexible Export Backflow Power</summary>
    public NumericSensorEntity SolisS6Eh1pFlexibleExportBackflowPower => new(_haContext, "sensor.solis_s6_eh1p_flexible_export_backflow_power");
    ///<summary>Solis S6-EH1P Force Charge SOC</summary>
    public NumericSensorEntity SolisS6Eh1pForceChargeSoc => new(_haContext, "sensor.solis_s6_eh1p_force_charge_soc");
    ///<summary>Solis S6-EH1P Generator Charging Power</summary>
    public NumericSensorEntity SolisS6Eh1pGeneratorChargingPower => new(_haContext, "sensor.solis_s6_eh1p_generator_charging_power");
    ///<summary>Solis S6-EH1P Generator Phase A Active Power</summary>
    public NumericSensorEntity SolisS6Eh1pGeneratorPhaseAActivePower => new(_haContext, "sensor.solis_s6_eh1p_generator_phase_a_active_power");
    ///<summary>Solis S6-EH1P Generator Phase B Active Power</summary>
    public NumericSensorEntity SolisS6Eh1pGeneratorPhaseBActivePower => new(_haContext, "sensor.solis_s6_eh1p_generator_phase_b_active_power");
    ///<summary>Solis S6-EH1P Generator Phase C Active Power</summary>
    public NumericSensorEntity SolisS6Eh1pGeneratorPhaseCActivePower => new(_haContext, "sensor.solis_s6_eh1p_generator_phase_c_active_power");
    ///<summary>Solis S6-EH1P Generator Target Power</summary>
    public NumericSensorEntity SolisS6Eh1pGeneratorTargetPower => new(_haContext, "sensor.solis_s6_eh1p_generator_target_power");
    ///<summary>Solis S6-EH1P Generator Today Energy</summary>
    public NumericSensorEntity SolisS6Eh1pGeneratorTodayEnergy => new(_haContext, "sensor.solis_s6_eh1p_generator_today_energy");
    ///<summary>Solis S6-EH1P Generator Total Energy</summary>
    public NumericSensorEntity SolisS6Eh1pGeneratorTotalEnergy => new(_haContext, "sensor.solis_s6_eh1p_generator_total_energy");
    ///<summary>Solis S6-EH1P Grid Frequency</summary>
    public NumericSensorEntity SolisS6Eh1pGridFrequency => new(_haContext, "sensor.solis_s6_eh1p_grid_frequency");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge battery current (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeBatteryCurrentSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_battery_current_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off SOC (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffSocSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_soc_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge cut off voltage (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeCutOffVoltageSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_cut_off_voltage_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Hour (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndHourSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_hour_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Hour (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndHourSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_hour_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Hour (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndHourSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_hour_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Hour (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndHourSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_hour_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Hour (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndHourSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_hour_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Hour (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndHourSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_hour_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Minute (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndMinuteSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_minute_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Minute (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndMinuteSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_minute_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Minute (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndMinuteSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_minute_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Minute (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndMinuteSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_minute_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Minute (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndMinuteSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_minute_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge End Minute (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeEndMinuteSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_end_minute_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Hour (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartHourSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_hour_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Hour (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartHourSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_hour_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Hour (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartHourSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_hour_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Hour (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartHourSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_hour_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Hour (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartHourSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_hour_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Hour (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartHourSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_hour_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Minute (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartMinuteSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_minute_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Minute (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartMinuteSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_minute_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Minute (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartMinuteSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_minute_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Minute (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartMinuteSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_minute_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Minute (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartMinuteSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_minute_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Charge Start Minute (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseChargeStartMinuteSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_charge_start_minute_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge battery current (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeBatteryCurrentSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_battery_current_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off SOC (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffSocSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_soc_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge cut off voltage (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeCutOffVoltageSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_cut_off_voltage_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Hour (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndHourSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_hour_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Hour (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndHourSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_hour_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Hour (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndHourSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_hour_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Hour (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndHourSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_hour_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Hour (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndHourSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_hour_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Hour (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndHourSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_hour_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Minute (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndMinuteSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_minute_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Minute (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndMinuteSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_minute_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Minute (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndMinuteSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_minute_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Minute (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndMinuteSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_minute_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Minute (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndMinuteSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_minute_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge End Minute (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeEndMinuteSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_end_minute_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Hour (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartHourSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_hour_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Hour (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartHourSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_hour_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Hour (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartHourSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_hour_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Hour (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartHourSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_hour_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Hour (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartHourSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_hour_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Hour (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartHourSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_hour_slot_6");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Minute (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartMinuteSlot1 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_minute_slot_1");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Minute (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartMinuteSlot2 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_minute_slot_2");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Minute (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartMinuteSlot3 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_minute_slot_3");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Minute (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartMinuteSlot4 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_minute_slot_4");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Minute (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartMinuteSlot5 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_minute_slot_5");
    ///<summary>Solis S6-EH1P Grid Time of Use Discharge Start Minute (Slot 6)</summary>
    public NumericSensorEntity SolisS6Eh1pGridTimeOfUseDischargeStartMinuteSlot6 => new(_haContext, "sensor.solis_s6_eh1p_grid_time_of_use_discharge_start_minute_slot_6");
    ///<summary>Solis S6-EH1P Household Load Month Energy</summary>
    public NumericSensorEntity SolisS6Eh1pHouseholdLoadMonthEnergy => new(_haContext, "sensor.solis_s6_eh1p_household_load_month_energy");
    ///<summary>Solis S6-EH1P Household load power</summary>
    public NumericSensorEntity SolisS6Eh1pHouseholdLoadPower => new(_haContext, "sensor.solis_s6_eh1p_household_load_power");
    ///<summary>Solis S6-EH1P Household Load Today Energy</summary>
    public NumericSensorEntity SolisS6Eh1pHouseholdLoadTodayEnergy => new(_haContext, "sensor.solis_s6_eh1p_household_load_today_energy");
    ///<summary>Solis S6-EH1P Household Load Total Energy</summary>
    public NumericSensorEntity SolisS6Eh1pHouseholdLoadTotalEnergy => new(_haContext, "sensor.solis_s6_eh1p_household_load_total_energy");
    ///<summary>Solis S6-EH1P Household Load Year Energy</summary>
    public NumericSensorEntity SolisS6Eh1pHouseholdLoadYearEnergy => new(_haContext, "sensor.solis_s6_eh1p_household_load_year_energy");
    ///<summary>Solis S6-EH1P Lead-acid Battery Temperature</summary>
    public NumericSensorEntity SolisS6Eh1pLeadAcidBatteryTemperature => new(_haContext, "sensor.solis_s6_eh1p_lead_acid_battery_temperature");
    ///<summary>Solis S6-EH1P LLC Bus Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pLlcBusVoltage => new(_haContext, "sensor.solis_s6_eh1p_llc_bus_voltage");
    ///<summary>Solis S6-EH1P Max Charge Current</summary>
    public NumericSensorEntity SolisS6Eh1pMaxChargeCurrent => new(_haContext, "sensor.solis_s6_eh1p_max_charge_current");
    ///<summary>Solis S6-EH1P Max Charge SOC</summary>
    public NumericSensorEntity SolisS6Eh1pMaxChargeSoc => new(_haContext, "sensor.solis_s6_eh1p_max_charge_soc");
    ///<summary>Solis S6-EH1P Max Discharge Current</summary>
    public NumericSensorEntity SolisS6Eh1pMaxDischargeCurrent => new(_haContext, "sensor.solis_s6_eh1p_max_discharge_current");
    ///<summary>Solis S6-EH1P Maximum Allowable Percentage of Generator</summary>
    public NumericSensorEntity SolisS6Eh1pMaximumAllowablePercentageOfGenerator => new(_haContext, "sensor.solis_s6_eh1p_maximum_allowable_percentage_of_generator");
    ///<summary>Solis S6-EH1P Meter AC Current A</summary>
    public NumericSensorEntity SolisS6Eh1pMeterAcCurrentA => new(_haContext, "sensor.solis_s6_eh1p_meter_ac_current_a");
    ///<summary>Solis S6-EH1P Meter AC Current B</summary>
    public NumericSensorEntity SolisS6Eh1pMeterAcCurrentB => new(_haContext, "sensor.solis_s6_eh1p_meter_ac_current_b");
    ///<summary>Solis S6-EH1P Meter AC Current C</summary>
    public NumericSensorEntity SolisS6Eh1pMeterAcCurrentC => new(_haContext, "sensor.solis_s6_eh1p_meter_ac_current_c");
    ///<summary>Solis S6-EH1P Meter AC Voltage A</summary>
    public NumericSensorEntity SolisS6Eh1pMeterAcVoltageA => new(_haContext, "sensor.solis_s6_eh1p_meter_ac_voltage_a");
    ///<summary>Solis S6-EH1P Meter AC Voltage B</summary>
    public NumericSensorEntity SolisS6Eh1pMeterAcVoltageB => new(_haContext, "sensor.solis_s6_eh1p_meter_ac_voltage_b");
    ///<summary>Solis S6-EH1P Meter AC Voltage C</summary>
    public NumericSensorEntity SolisS6Eh1pMeterAcVoltageC => new(_haContext, "sensor.solis_s6_eh1p_meter_ac_voltage_c");
    ///<summary>Solis S6-EH1P Meter Active Power A</summary>
    public NumericSensorEntity SolisS6Eh1pMeterActivePowerA => new(_haContext, "sensor.solis_s6_eh1p_meter_active_power_a");
    ///<summary>Solis S6-EH1P Meter Active Power B</summary>
    public NumericSensorEntity SolisS6Eh1pMeterActivePowerB => new(_haContext, "sensor.solis_s6_eh1p_meter_active_power_b");
    ///<summary>Solis S6-EH1P Meter Active Power C</summary>
    public NumericSensorEntity SolisS6Eh1pMeterActivePowerC => new(_haContext, "sensor.solis_s6_eh1p_meter_active_power_c");
    ///<summary>Solis S6-EH1P Meter Total Active Power</summary>
    public NumericSensorEntity SolisS6Eh1pMeterTotalActivePower => new(_haContext, "sensor.solis_s6_eh1p_meter_total_active_power");
    ///<summary>Solis S6-EH1P MPPT Scanning Interval</summary>
    public NumericSensorEntity SolisS6Eh1pMpptScanningInterval => new(_haContext, "sensor.solis_s6_eh1p_mppt_scanning_interval");
    ///<summary>Solis S6-EH1P Off-Grid Overdischarge SOC</summary>
    public NumericSensorEntity SolisS6Eh1pOffGridOverdischargeSoc => new(_haContext, "sensor.solis_s6_eh1p_off_grid_overdischarge_soc");
    ///<summary>Solis S6-EH1P Overdischarge SOC</summary>
    public NumericSensorEntity SolisS6Eh1pOverdischargeSoc => new(_haContext, "sensor.solis_s6_eh1p_overdischarge_soc");
    ///<summary>Solis S6-EH1P Parallel Inverter AC Current</summary>
    public NumericSensorEntity SolisS6Eh1pParallelInverterAcCurrent => new(_haContext, "sensor.solis_s6_eh1p_parallel_inverter_ac_current");
    ///<summary>Solis S6-EH1P Parallel Inverter AC Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pParallelInverterAcVoltage => new(_haContext, "sensor.solis_s6_eh1p_parallel_inverter_ac_voltage");
    ///<summary>Solis S6-EH1P Parallel Inverter Power</summary>
    public NumericSensorEntity SolisS6Eh1pParallelInverterPower => new(_haContext, "sensor.solis_s6_eh1p_parallel_inverter_power");
    ///<summary>Solis S6-EH1P Peak Baseline SOC</summary>
    public NumericSensorEntity SolisS6Eh1pPeakBaselineSoc => new(_haContext, "sensor.solis_s6_eh1p_peak_baseline_soc");
    ///<summary>Solis S6-EH1P Peak Max Usable Grid Power</summary>
    public NumericSensorEntity SolisS6Eh1pPeakMaxUsableGridPower => new(_haContext, "sensor.solis_s6_eh1p_peak_max_usable_grid_power");
    ///<summary>Solis S6-EH1P PV Bus Half Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pPvBusHalfVoltage => new(_haContext, "sensor.solis_s6_eh1p_pv_bus_half_voltage");
    ///<summary>Solis S6-EH1P PV Current 1</summary>
    public NumericSensorEntity SolisS6Eh1pPvCurrent1 => new(_haContext, "sensor.solis_s6_eh1p_pv_current_1");
    ///<summary>Solis S6-EH1P PV Current 2</summary>
    public NumericSensorEntity SolisS6Eh1pPvCurrent2 => new(_haContext, "sensor.solis_s6_eh1p_pv_current_2");
    ///<summary>Solis S6-EH1P PV Current 3</summary>
    public NumericSensorEntity SolisS6Eh1pPvCurrent3 => new(_haContext, "sensor.solis_s6_eh1p_pv_current_3");
    ///<summary>Solis S6-EH1P PV Current 4</summary>
    public NumericSensorEntity SolisS6Eh1pPvCurrent4 => new(_haContext, "sensor.solis_s6_eh1p_pv_current_4");
    ///<summary>Solis S6-EH1P PV Current Month Energy Generation</summary>
    public NumericSensorEntity SolisS6Eh1pPvCurrentMonthEnergyGeneration => new(_haContext, "sensor.solis_s6_eh1p_pv_current_month_energy_generation");
    ///<summary>Solis S6-EH1P PV Last Month Energy Generation</summary>
    public NumericSensorEntity SolisS6Eh1pPvLastMonthEnergyGeneration => new(_haContext, "sensor.solis_s6_eh1p_pv_last_month_energy_generation");
    ///<summary>Solis S6-EH1P PV Last Year Energy Generation</summary>
    public NumericSensorEntity SolisS6Eh1pPvLastYearEnergyGeneration => new(_haContext, "sensor.solis_s6_eh1p_pv_last_year_energy_generation");
    ///<summary>Solis S6-EH1P PV Power 1</summary>
    public NumericSensorEntity SolisS6Eh1pPvPower1 => new(_haContext, "sensor.solis_s6_eh1p_pv_power_1");
    ///<summary>Solis S6-EH1P PV Power 2</summary>
    public NumericSensorEntity SolisS6Eh1pPvPower2 => new(_haContext, "sensor.solis_s6_eh1p_pv_power_2");
    ///<summary>Solis S6-EH1P PV Power 3</summary>
    public NumericSensorEntity SolisS6Eh1pPvPower3 => new(_haContext, "sensor.solis_s6_eh1p_pv_power_3");
    ///<summary>Solis S6-EH1P PV Power 4</summary>
    public NumericSensorEntity SolisS6Eh1pPvPower4 => new(_haContext, "sensor.solis_s6_eh1p_pv_power_4");
    ///<summary>Solis S6-EH1P PV This Year Energy Generation</summary>
    public NumericSensorEntity SolisS6Eh1pPvThisYearEnergyGeneration => new(_haContext, "sensor.solis_s6_eh1p_pv_this_year_energy_generation");
    ///<summary>Solis S6-EH1P PV Today Energy Generation</summary>
    public NumericSensorEntity SolisS6Eh1pPvTodayEnergyGeneration => new(_haContext, "sensor.solis_s6_eh1p_pv_today_energy_generation");
    ///<summary>Solis S6-EH1P PV Total Energy Generation</summary>
    public NumericSensorEntity SolisS6Eh1pPvTotalEnergyGeneration => new(_haContext, "sensor.solis_s6_eh1p_pv_total_energy_generation");
    ///<summary>Solis S6-EH1P PV Voltage 1</summary>
    public NumericSensorEntity SolisS6Eh1pPvVoltage1 => new(_haContext, "sensor.solis_s6_eh1p_pv_voltage_1");
    ///<summary>Solis S6-EH1P PV Voltage 2 </summary>
    public NumericSensorEntity SolisS6Eh1pPvVoltage2 => new(_haContext, "sensor.solis_s6_eh1p_pv_voltage_2");
    ///<summary>Solis S6-EH1P PV Voltage 3</summary>
    public NumericSensorEntity SolisS6Eh1pPvVoltage3 => new(_haContext, "sensor.solis_s6_eh1p_pv_voltage_3");
    ///<summary>Solis S6-EH1P PV Voltage 4</summary>
    public NumericSensorEntity SolisS6Eh1pPvVoltage4 => new(_haContext, "sensor.solis_s6_eh1p_pv_voltage_4");
    ///<summary>Solis S6-EH1P PV Yesterday Energy Generation</summary>
    public NumericSensorEntity SolisS6Eh1pPvYesterdayEnergyGeneration => new(_haContext, "sensor.solis_s6_eh1p_pv_yesterday_energy_generation");
    ///<summary>Solis S6-EH1P Rated Input Power of Generator</summary>
    public NumericSensorEntity SolisS6Eh1pRatedInputPowerOfGenerator => new(_haContext, "sensor.solis_s6_eh1p_rated_input_power_of_generator");
    ///<summary>Solis S6-EH1P RC Force Battery Charge Power</summary>
    public NumericSensorEntity SolisS6Eh1pRcForceBatteryChargePower => new(_haContext, "sensor.solis_s6_eh1p_rc_force_battery_charge_power");
    ///<summary>Solis S6-EH1P RC Force Battery Discharge Power</summary>
    public NumericSensorEntity SolisS6Eh1pRcForceBatteryDischargePower => new(_haContext, "sensor.solis_s6_eh1p_rc_force_battery_discharge_power");
    ///<summary>Solis S6-EH1P RC Timeout</summary>
    public NumericSensorEntity SolisS6Eh1pRcTimeout => new(_haContext, "sensor.solis_s6_eh1p_rc_timeout");
    ///<summary>Solis S6-EH1P Reactive Power</summary>
    public NumericSensorEntity SolisS6Eh1pReactivePower => new(_haContext, "sensor.solis_s6_eh1p_reactive_power");
    ///<summary>Solis S6-EH1P SmartPort A Phase Current</summary>
    public NumericSensorEntity SolisS6Eh1pSmartportAPhaseCurrent => new(_haContext, "sensor.solis_s6_eh1p_smartport_a_phase_current");
    ///<summary>Solis S6-EH1P SmartPort A Phase Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pSmartportAPhaseVoltage => new(_haContext, "sensor.solis_s6_eh1p_smartport_a_phase_voltage");
    ///<summary>Solis S6-EH1P SmartPort B Phase Current</summary>
    public NumericSensorEntity SolisS6Eh1pSmartportBPhaseCurrent => new(_haContext, "sensor.solis_s6_eh1p_smartport_b_phase_current");
    ///<summary>Solis S6-EH1P SmartPort B Phase Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pSmartportBPhaseVoltage => new(_haContext, "sensor.solis_s6_eh1p_smartport_b_phase_voltage");
    ///<summary>Solis S6-EH1P SmartPort C Phase Current</summary>
    public NumericSensorEntity SolisS6Eh1pSmartportCPhaseCurrent => new(_haContext, "sensor.solis_s6_eh1p_smartport_c_phase_current");
    ///<summary>Solis S6-EH1P SmartPort C Phase Voltage</summary>
    public NumericSensorEntity SolisS6Eh1pSmartportCPhaseVoltage => new(_haContext, "sensor.solis_s6_eh1p_smartport_c_phase_voltage");
    ///<summary>Solis S6-EH1P Temperature</summary>
    public NumericSensorEntity SolisS6Eh1pTemperature => new(_haContext, "sensor.solis_s6_eh1p_temperature");
    ///<summary>Solis S6-EH1P Time-Charging Charge Current</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeCurrent => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_current");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Hour (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndHourSlot1 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_hour_slot_1");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Hour (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndHourSlot2 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_hour_slot_2");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Hour (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndHourSlot3 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_hour_slot_3");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Hour (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndHourSlot4 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_hour_slot_4");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Hour (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndHourSlot5 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_hour_slot_5");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Minute (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndMinuteSlot1 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_minute_slot_1");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Minute (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndMinuteSlot2 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_minute_slot_2");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Minute (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndMinuteSlot3 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_minute_slot_3");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Minute (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndMinuteSlot4 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_minute_slot_4");
    ///<summary>Solis S6-EH1P Time-Charging Charge End Minute (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeEndMinuteSlot5 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_end_minute_slot_5");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Hour (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartHourSlot1 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_hour_slot_1");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Hour (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartHourSlot2 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_hour_slot_2");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Hour (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartHourSlot3 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_hour_slot_3");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Hour (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartHourSlot4 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_hour_slot_4");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Hour (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartHourSlot5 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_hour_slot_5");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Minute (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartMinuteSlot1 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_minute_slot_1");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Minute (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartMinuteSlot2 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_minute_slot_2");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Minute (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartMinuteSlot3 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_minute_slot_3");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Minute (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartMinuteSlot4 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_minute_slot_4");
    ///<summary>Solis S6-EH1P Time-Charging Charge Start Minute (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingChargeStartMinuteSlot5 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_charge_start_minute_slot_5");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Current</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeCurrent => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_current");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Hour (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndHourSlot1 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_hour_slot_1");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Hour (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndHourSlot2 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_hour_slot_2");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Hour (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndHourSlot3 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_hour_slot_3");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Hour (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndHourSlot4 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_hour_slot_4");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Hour (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndHourSlot5 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_hour_slot_5");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Minute (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndMinuteSlot1 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_minute_slot_1");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Minute (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndMinuteSlot2 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_minute_slot_2");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Minute (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndMinuteSlot3 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_minute_slot_3");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Minute (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndMinuteSlot4 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_minute_slot_4");
    ///<summary>Solis S6-EH1P Time-Charging Discharge End Minute (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeEndMinuteSlot5 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_end_minute_slot_5");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Hour (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartHourSlot1 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_hour_slot_1");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Hour (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartHourSlot2 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_hour_slot_2");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Hour (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartHourSlot3 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_hour_slot_3");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Hour (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartHourSlot4 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_hour_slot_4");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Hour (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartHourSlot5 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_hour_slot_5");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Minute (Slot 1)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartMinuteSlot1 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_minute_slot_1");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Minute (Slot 2)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartMinuteSlot2 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_minute_slot_2");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Minute (Slot 3)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartMinuteSlot3 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_minute_slot_3");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Minute (Slot 4)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartMinuteSlot4 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_minute_slot_4");
    ///<summary>Solis S6-EH1P Time-Charging Discharge Start Minute (Slot 5)</summary>
    public NumericSensorEntity SolisS6Eh1pTimeChargingDischargeStartMinuteSlot5 => new(_haContext, "sensor.solis_s6_eh1p_time_charging_discharge_start_minute_slot_5");
    ///<summary>Solis S6-EH1P Today Battery Charge Energy</summary>
    public NumericSensorEntity SolisS6Eh1pTodayBatteryChargeEnergy => new(_haContext, "sensor.solis_s6_eh1p_today_battery_charge_energy");
    ///<summary>Solis S6-EH1P Today Battery Discharge Energy</summary>
    public NumericSensorEntity SolisS6Eh1pTodayBatteryDischargeEnergy => new(_haContext, "sensor.solis_s6_eh1p_today_battery_discharge_energy");
    ///<summary>Solis S6-EH1P Today Energy Consumption</summary>
    public NumericSensorEntity SolisS6Eh1pTodayEnergyConsumption => new(_haContext, "sensor.solis_s6_eh1p_today_energy_consumption");
    ///<summary>Solis S6-EH1P Today Energy Fed Into Grid</summary>
    public NumericSensorEntity SolisS6Eh1pTodayEnergyFedIntoGrid => new(_haContext, "sensor.solis_s6_eh1p_today_energy_fed_into_grid");
    ///<summary>Solis S6-EH1P Today Energy Imported From Grid</summary>
    public NumericSensorEntity SolisS6Eh1pTodayEnergyImportedFromGrid => new(_haContext, "sensor.solis_s6_eh1p_today_energy_imported_from_grid");
    ///<summary>Solis S6-EH1P Total Battery Charge Energy</summary>
    public NumericSensorEntity SolisS6Eh1pTotalBatteryChargeEnergy => new(_haContext, "sensor.solis_s6_eh1p_total_battery_charge_energy");
    ///<summary>Solis S6-EH1P Total Battery Discharge Energy</summary>
    public NumericSensorEntity SolisS6Eh1pTotalBatteryDischargeEnergy => new(_haContext, "sensor.solis_s6_eh1p_total_battery_discharge_energy");
    ///<summary>Solis S6-EH1P Total Energy Consumption</summary>
    public NumericSensorEntity SolisS6Eh1pTotalEnergyConsumption => new(_haContext, "sensor.solis_s6_eh1p_total_energy_consumption");
    ///<summary>Solis S6-EH1P Total Energy Fed Into Grid</summary>
    public NumericSensorEntity SolisS6Eh1pTotalEnergyFedIntoGrid => new(_haContext, "sensor.solis_s6_eh1p_total_energy_fed_into_grid");
    ///<summary>Solis S6-EH1P Total Energy Imported From Grid</summary>
    public NumericSensorEntity SolisS6Eh1pTotalEnergyImportedFromGrid => new(_haContext, "sensor.solis_s6_eh1p_total_energy_imported_from_grid");
    ///<summary>Solis S6-EH1P Total PV Power</summary>
    public NumericSensorEntity SolisS6Eh1pTotalPvPower => new(_haContext, "sensor.solis_s6_eh1p_total_pv_power");
    ///<summary>Solis S6-EH1P Yesterday Battery Charge Energy</summary>
    public NumericSensorEntity SolisS6Eh1pYesterdayBatteryChargeEnergy => new(_haContext, "sensor.solis_s6_eh1p_yesterday_battery_charge_energy");
    ///<summary>Solis S6-EH1P Yesterday Battery Discharge Energy</summary>
    public NumericSensorEntity SolisS6Eh1pYesterdayBatteryDischargeEnergy => new(_haContext, "sensor.solis_s6_eh1p_yesterday_battery_discharge_energy");
    ///<summary>Solis S6-EH1P Yesterday Energy Consumption</summary>
    public NumericSensorEntity SolisS6Eh1pYesterdayEnergyConsumption => new(_haContext, "sensor.solis_s6_eh1p_yesterday_energy_consumption");
    ///<summary>Solis S6-EH1P Yesterday Energy Fed Into Grid</summary>
    public NumericSensorEntity SolisS6Eh1pYesterdayEnergyFedIntoGrid => new(_haContext, "sensor.solis_s6_eh1p_yesterday_energy_fed_into_grid");
    ///<summary>Solis S6-EH1P Yesterday Energy Imported From Grid</summary>
    public NumericSensorEntity SolisS6Eh1pYesterdayEnergyImportedFromGrid => new(_haContext, "sensor.solis_s6_eh1p_yesterday_energy_imported_from_grid");
    ///<summary>SolisCloud AC Output Total Power</summary>
    public NumericSensorEntity SoliscloudAcOutputTotalPower => new(_haContext, "sensor.soliscloud_ac_output_total_power");
    ///<summary>SolisCloud Battery Power</summary>
    public NumericSensorEntity SoliscloudBatteryPower => new(_haContext, "sensor.soliscloud_battery_power");
    ///<summary>SolisCloud Battery State Of Health</summary>
    public NumericSensorEntity SoliscloudBatteryStateOfHealth => new(_haContext, "sensor.soliscloud_battery_state_of_health");
    ///<summary>SolisCloud Energy Total</summary>
    public NumericSensorEntity SoliscloudEnergyTotal => new(_haContext, "sensor.soliscloud_energy_total");
    ///<summary>SolisCloud Force Charge SOC</summary>
    public NumericSensorEntity SoliscloudForceChargeSoc => new(_haContext, "sensor.soliscloud_force_charge_soc");
    ///<summary>SolisCloud Force Discharge SOC</summary>
    public NumericSensorEntity SoliscloudForceDischargeSoc => new(_haContext, "sensor.soliscloud_force_discharge_soc");
    ///<summary>SolisCloud Plant Total Consumption power</summary>
    public NumericSensorEntity SoliscloudPlantTotalConsumptionPower => new(_haContext, "sensor.soliscloud_plant_total_consumption_power");
    ///<summary>SolisCloud Power Grid total power</summary>
    public NumericSensorEntity SoliscloudPowerGridTotalPower => new(_haContext, "sensor.soliscloud_power_grid_total_power");
    ///<summary>SolisCloud Remaining Battery Capacity</summary>
    public NumericSensorEntity SoliscloudRemainingBatteryCapacity => new(_haContext, "sensor.soliscloud_remaining_battery_capacity");
    ///<summary>SolisCloud Total Consumption power</summary>
    public NumericSensorEntity SoliscloudTotalConsumptionPower => new(_haContext, "sensor.soliscloud_total_consumption_power");
    ///<summary>SolisCloud Total Energy Charged</summary>
    public NumericSensorEntity SoliscloudTotalEnergyCharged => new(_haContext, "sensor.soliscloud_total_energy_charged");
    ///<summary>SolisCloud Total Energy Discharged</summary>
    public NumericSensorEntity SoliscloudTotalEnergyDischarged => new(_haContext, "sensor.soliscloud_total_energy_discharged");
    ///<summary>SolisCloud Yearly Energy Discharged</summary>
    public NumericSensorEntity SoliscloudYearlyEnergyDischarged => new(_haContext, "sensor.soliscloud_yearly_energy_discharged");
    ///<summary>System Monitor Processor use</summary>
    public NumericSensorEntity SystemMonitorProcessorUse => new(_haContext, "sensor.system_monitor_processor_use");
    ///<summary>System Monitor Processortemperatuur</summary>
    public NumericSensorEntity SystemMonitorProcessortemperatuur => new(_haContext, "sensor.system_monitor_processortemperatuur");
    ///<summary>tablet Johan  Battery level</summary>
    public NumericSensorEntity TabletJohanBatteryLevel => new(_haContext, "sensor.tablet_johan_battery_level");
    ///<summary>Thuis Outdoor temperature</summary>
    public NumericSensorEntity ThuisOutdoorTemperature => new(_haContext, "sensor.thuis_outdoor_temperature");
    ///<summary>Thuis Solar percentage</summary>
    public NumericSensorEntity ThuisSolarPercentage => new(_haContext, "sensor.thuis_solar_percentage");
    ///<summary>Verwarming Heating</summary>
    public NumericSensorEntity VerwarmingHeating => new(_haContext, "sensor.verwarming_heating");
    ///<summary>Verwarming Luchtvochtigheid</summary>
    public NumericSensorEntity VerwarmingLuchtvochtigheid => new(_haContext, "sensor.verwarming_luchtvochtigheid");
    ///<summary>Verwarming Temperatuur</summary>
    public NumericSensorEntity VerwarmingTemperatuur => new(_haContext, "sensor.verwarming_temperatuur");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all switch entities currently registered (at runtime) in Home Assistant as SwitchEntity</summary>
    public IEnumerable<SwitchEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("switch.")).Select(e => new SwitchEntity(e));
    ///<summary>aircoliving Power</summary>
    public SwitchEntity AircolivingNone => new(_haContext, "switch.aircoliving_none");
    ///<summary>aircoliving Streamer</summary>
    public SwitchEntity AircolivingStreamer => new(_haContext, "switch.aircoliving_streamer");
    ///<summary>charger Availability</summary>
    public SwitchEntity ChargerAvailability => new(_haContext, "switch.charger_availability");
    ///<summary>charger Charge Control</summary>
    public SwitchEntity ChargerChargeControl => new(_haContext, "switch.charger_charge_control");
    ///<summary>Const Voltage Mode Enable Const Voltage</summary>
    public SwitchEntity ConstVoltageModeEnableConstVoltage => new(_haContext, "switch.const_voltage_mode_enable_const_voltage");
    ///<summary>Flexible Export Enabling Switch</summary>
    public SwitchEntity FlexibleExportEnablingSwitch => new(_haContext, "switch.flexible_export_enabling_switch");
    ///<summary>Grid-Interference Protection</summary>
    public SwitchEntity GridInterferenceProtection => new(_haContext, "switch.grid_interference_protection");
    ///<summary>I-Leak Protection</summary>
    public SwitchEntity ILeakProtection => new(_haContext, "switch.i_leak_protection");
    ///<summary>IgFollow</summary>
    public SwitchEntity Igfollow => new(_haContext, "switch.igfollow");
    ///<summary>MPPT Parallel Function</summary>
    public SwitchEntity MpptParallelFunction => new(_haContext, "switch.mppt_parallel_function");
    ///<summary>PV ISO Protection</summary>
    public SwitchEntity PvIsoProtection => new(_haContext, "switch.pv_iso_protection");
    ///<summary>Relay Protection</summary>
    public SwitchEntity RelayProtection => new(_haContext, "switch.relay_protection");
    ///<summary>Solis AC Coupling Enable</summary>
    public SwitchEntity SolisAcCouplingEnable => new(_haContext, "switch.solis_ac_coupling_enable");
    ///<summary>Solis AC Coupling Position (off = GEN port, on = Backup port)</summary>
    public SwitchEntity SolisAcCouplingPositionOffGenPortOnBackupPort => new(_haContext, "switch.solis_ac_coupling_position_off_gen_port_on_backup_port");
    ///<summary>Solis Allow export switch under self-generation and self-use</summary>
    public SwitchEntity SolisAllowExportSwitchUnderSelfGenerationAndSelfUse => new(_haContext, "switch.solis_allow_export_switch_under_self_generation_and_self_use");
    ///<summary>Solis Allow Grid To Charge The Battery</summary>
    public SwitchEntity SolisAllowGridToChargeTheBattery => new(_haContext, "switch.solis_allow_grid_to_charge_the_battery");
    ///<summary>Solis Backup2Load manual/automatic switch (off = Manual, on = Automatic</summary>
    public SwitchEntity SolisBackup2loadManualAutomaticSwitchOffManualOnAutomatic => new(_haContext, "switch.solis_backup2load_manual_automatic_switch_off_manual_on_automatic");
    ///<summary>Solis Backup2Load manual enable</summary>
    public SwitchEntity SolisBackup2loadManualEnable => new(_haContext, "switch.solis_backup2load_manual_enable");
    ///<summary>Solis Batt OVC</summary>
    public SwitchEntity SolisBattOvc => new(_haContext, "switch.solis_batt_ovc");
    ///<summary>Solis Battery current correction</summary>
    public SwitchEntity SolisBatteryCurrentCorrection => new(_haContext, "switch.solis_battery_current_correction");
    ///<summary>Solis Battery Forcecharge Peakshaving</summary>
    public SwitchEntity SolisBatteryForcechargePeakshaving => new(_haContext, "switch.solis_battery_forcecharge_peakshaving");
    ///<summary>Solis Battery healing mode</summary>
    public SwitchEntity SolisBatteryHealingMode => new(_haContext, "switch.solis_battery_healing_mode");
    ///<summary>Solis Battery Wakeup Switch</summary>
    public SwitchEntity SolisBatteryWakeupSwitch => new(_haContext, "switch.solis_battery_wakeup_switch");
    ///<summary>Solis Dual Backup Enable</summary>
    public SwitchEntity SolisDualBackupEnable => new(_haContext, "switch.solis_dual_backup_enable");
    ///<summary>Solis Feed In Priority Mode</summary>
    public SwitchEntity SolisFeedInPriorityMode => new(_haContext, "switch.solis_feed_in_priority_mode");
    ///<summary>Solis Force Start Generator</summary>
    public SwitchEntity SolisForceStartGenerator => new(_haContext, "switch.solis_force_start_generator");
    ///<summary>Solis Generator access location</summary>
    public SwitchEntity SolisGeneratorAccessLocation => new(_haContext, "switch.solis_generator_access_location");
    ///<summary>Solis Generator Charge Enable</summary>
    public SwitchEntity SolisGeneratorChargeEnable => new(_haContext, "switch.solis_generator_charge_enable");
    ///<summary>Solis Generator charging period 1 switch</summary>
    public SwitchEntity SolisGeneratorChargingPeriod1Switch => new(_haContext, "switch.solis_generator_charging_period_1_switch");
    ///<summary>Solis Generator charging period 2 switch</summary>
    public SwitchEntity SolisGeneratorChargingPeriod2Switch => new(_haContext, "switch.solis_generator_charging_period_2_switch");
    ///<summary>Solis Generator charging period 3 switch</summary>
    public SwitchEntity SolisGeneratorChargingPeriod3Switch => new(_haContext, "switch.solis_generator_charging_period_3_switch");
    ///<summary>Solis Generator charging period 4 switch</summary>
    public SwitchEntity SolisGeneratorChargingPeriod4Switch => new(_haContext, "switch.solis_generator_charging_period_4_switch");
    ///<summary>Solis Generator charging period 5 switch</summary>
    public SwitchEntity SolisGeneratorChargingPeriod5Switch => new(_haContext, "switch.solis_generator_charging_period_5_switch");
    ///<summary>Solis Generator charging period 6 switch</summary>
    public SwitchEntity SolisGeneratorChargingPeriod6Switch => new(_haContext, "switch.solis_generator_charging_period_6_switch");
    ///<summary>Solis Generator connection position</summary>
    public SwitchEntity SolisGeneratorConnectionPosition => new(_haContext, "switch.solis_generator_connection_position");
    ///<summary>Solis Generator enable signal</summary>
    public SwitchEntity SolisGeneratorEnableSignal => new(_haContext, "switch.solis_generator_enable_signal");
    ///<summary>Solis Generator Input Mode (off = Manual, on = Auto)</summary>
    public SwitchEntity SolisGeneratorInputModeOffManualOnAuto => new(_haContext, "switch.solis_generator_input_mode_off_manual_on_auto");
    ///<summary>Solis Grid Peak-shaving power enable</summary>
    public SwitchEntity SolisGridPeakShavingPowerEnable => new(_haContext, "switch.solis_grid_peak_shaving_power_enable");
    ///<summary>Solis Grid Time of Use Charging Period 1</summary>
    public SwitchEntity SolisGridTimeOfUseChargingPeriod1 => new(_haContext, "switch.solis_grid_time_of_use_charging_period_1");
    ///<summary>Solis Grid Time of Use Charging Period 2</summary>
    public SwitchEntity SolisGridTimeOfUseChargingPeriod2 => new(_haContext, "switch.solis_grid_time_of_use_charging_period_2");
    ///<summary>Solis Grid Time of Use Charging Period 3</summary>
    public SwitchEntity SolisGridTimeOfUseChargingPeriod3 => new(_haContext, "switch.solis_grid_time_of_use_charging_period_3");
    ///<summary>Solis Grid Time of Use Charging Period 4</summary>
    public SwitchEntity SolisGridTimeOfUseChargingPeriod4 => new(_haContext, "switch.solis_grid_time_of_use_charging_period_4");
    ///<summary>Solis Grid Time of Use Charging Period 5</summary>
    public SwitchEntity SolisGridTimeOfUseChargingPeriod5 => new(_haContext, "switch.solis_grid_time_of_use_charging_period_5");
    ///<summary>Solis Grid Time of Use Charging Period 6</summary>
    public SwitchEntity SolisGridTimeOfUseChargingPeriod6 => new(_haContext, "switch.solis_grid_time_of_use_charging_period_6");
    ///<summary>Solis Grid Time of Use Discharge Period 1</summary>
    public SwitchEntity SolisGridTimeOfUseDischargePeriod1 => new(_haContext, "switch.solis_grid_time_of_use_discharge_period_1");
    ///<summary>Solis Grid Time of Use Discharge Period 2</summary>
    public SwitchEntity SolisGridTimeOfUseDischargePeriod2 => new(_haContext, "switch.solis_grid_time_of_use_discharge_period_2");
    ///<summary>Solis Grid Time of Use Discharge Period 3</summary>
    public SwitchEntity SolisGridTimeOfUseDischargePeriod3 => new(_haContext, "switch.solis_grid_time_of_use_discharge_period_3");
    ///<summary>Solis Grid Time of Use Discharge Period 4</summary>
    public SwitchEntity SolisGridTimeOfUseDischargePeriod4 => new(_haContext, "switch.solis_grid_time_of_use_discharge_period_4");
    ///<summary>Solis Grid Time of Use Discharge Period 5</summary>
    public SwitchEntity SolisGridTimeOfUseDischargePeriod5 => new(_haContext, "switch.solis_grid_time_of_use_discharge_period_5");
    ///<summary>Solis Grid Time of Use Discharge Period 6</summary>
    public SwitchEntity SolisGridTimeOfUseDischargePeriod6 => new(_haContext, "switch.solis_grid_time_of_use_discharge_period_6");
    ///<summary>Solis Modbus Enabled</summary>
    public SwitchEntity SolisModbusEnabled => new(_haContext, "switch.solis_modbus_enabled");
    ///<summary>Solis OFF-Grid Mode</summary>
    public SwitchEntity SolisOffGridMode => new(_haContext, "switch.solis_off_grid_mode");
    ///<summary>Solis Peak-shaving Mode</summary>
    public SwitchEntity SolisPeakShavingMode => new(_haContext, "switch.solis_peak_shaving_mode");
    ///<summary>Solis RC Force Battery Charge</summary>
    public SwitchEntity SolisRcForceBatteryCharge => new(_haContext, "switch.solis_rc_force_battery_charge");
    ///<summary>Solis RC Force Battery Discharge</summary>
    public SwitchEntity SolisRcForceBatteryDischarge => new(_haContext, "switch.solis_rc_force_battery_discharge");
    ///<summary>Solis Reserve Battery Mode</summary>
    public SwitchEntity SolisReserveBatteryMode => new(_haContext, "switch.solis_reserve_battery_mode");
    ///<summary>Solis Self-Use Mode</summary>
    public SwitchEntity SolisSelfUseMode => new(_haContext, "switch.solis_self_use_mode");
    ///<summary>Solis Smart load port grid-connected forced output</summary>
    public SwitchEntity SolisSmartLoadPortGridConnectedForcedOutput => new(_haContext, "switch.solis_smart_load_port_grid_connected_forced_output");
    ///<summary>Solis Smart load port stops output when off-grid</summary>
    public SwitchEntity SolisSmartLoadPortStopsOutputWhenOffGrid => new(_haContext, "switch.solis_smart_load_port_stops_output_when_off_grid");
    ///<summary>Solis Time Of Use Mode</summary>
    public SwitchEntity SolisTimeOfUseMode => new(_haContext, "switch.solis_time_of_use_mode");
    ///<summary>Solis With Generator</summary>
    public SwitchEntity SolisWithGenerator => new(_haContext, "switch.solis_with_generator");
    ///<summary>The DC component of the grid current protection switch</summary>
    public SwitchEntity TheDcComponentOfTheGridCurrentProtectionSwitch => new(_haContext, "switch.the_dc_component_of_the_grid_current_protection_switch");
}

public partial class TimeEntities
{
    private readonly IHaContext _haContext;
    public TimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all time entities currently registered (at runtime) in Home Assistant as TimeEntity</summary>
    public IEnumerable<TimeEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("time.")).Select(e => new TimeEntity(e));
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge End (Slot 1)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeEndSlot1 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_end_slot_1");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge End (Slot 2)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeEndSlot2 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_end_slot_2");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge End (Slot 3)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeEndSlot3 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_end_slot_3");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge End (Slot 4)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeEndSlot4 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_end_slot_4");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge End (Slot 5)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeEndSlot5 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_end_slot_5");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge End (Slot 6)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeEndSlot6 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_end_slot_6");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge Start (Slot 1)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeStartSlot1 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_start_slot_1");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge Start (Slot 2)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeStartSlot2 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_start_slot_2");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge Start (Slot 3)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeStartSlot3 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_start_slot_3");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge Start (Slot 4)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeStartSlot4 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_start_slot_4");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge Start (Slot 5)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeStartSlot5 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_start_slot_5");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Charge Start (Slot 6)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseChargeStartSlot6 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_charge_start_slot_6");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge End (Slot 1)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeEndSlot1 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_end_slot_1");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge End (Slot 2)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeEndSlot2 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_end_slot_2");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge End (Slot 3)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeEndSlot3 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_end_slot_3");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge End (Slot 4)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeEndSlot4 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_end_slot_4");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge End (Slot 5)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeEndSlot5 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_end_slot_5");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge End (Slot 6)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeEndSlot6 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_end_slot_6");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge Start (Slot 1)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeStartSlot1 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_start_slot_1");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge Start (Slot 2)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeStartSlot2 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_start_slot_2");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge Start (Slot 3)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeStartSlot3 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_start_slot_3");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge Start (Slot 4)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeStartSlot4 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_start_slot_4");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge Start (Slot 5)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeStartSlot5 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_start_slot_5");
    ///<summary>Solis S6-EH1P Solis Grid Time of Use Discharge Start (Slot 6)</summary>
    public TimeEntity SolisS6Eh1pSolisGridTimeOfUseDischargeStartSlot6 => new(_haContext, "time.solis_s6_eh1p_solis_grid_time_of_use_discharge_start_slot_6");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge End (Slot 1)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeEndSlot1 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_end_slot_1");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge End (Slot 2)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeEndSlot2 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_end_slot_2");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge End (Slot 3)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeEndSlot3 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_end_slot_3");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge End (Slot 4)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeEndSlot4 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_end_slot_4");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge End (Slot 5)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeEndSlot5 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_end_slot_5");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge Start (Slot 1)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeStartSlot1 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_start_slot_1");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge Start (Slot 2)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeStartSlot2 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_start_slot_2");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge Start (Slot 3)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeStartSlot3 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_start_slot_3");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge Start (Slot 4)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeStartSlot4 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_start_slot_4");
    ///<summary>Solis S6-EH1P Solis Time-Charging Charge Start (Slot 5)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingChargeStartSlot5 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_charge_start_slot_5");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge End (Slot 1)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeEndSlot1 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_end_slot_1");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge End (Slot 2)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeEndSlot2 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_end_slot_2");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge End (Slot 3)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeEndSlot3 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_end_slot_3");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge End (Slot 4)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeEndSlot4 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_end_slot_4");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge End (Slot 5)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeEndSlot5 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_end_slot_5");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge Start (Slot 1)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeStartSlot1 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_start_slot_1");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge Start (Slot 2)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeStartSlot2 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_start_slot_2");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge Start (Slot 3)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeStartSlot3 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_start_slot_3");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge Start (Slot 4)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeStartSlot4 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_start_slot_4");
    ///<summary>Solis S6-EH1P Solis Time-Charging Discharge Start (Slot 5)</summary>
    public TimeEntity SolisS6Eh1pSolisTimeChargingDischargeStartSlot5 => new(_haContext, "time.solis_s6_eh1p_solis_time_charging_discharge_start_slot_5");
    ///<summary>Soliscloud Timed Charge End 1</summary>
    public TimeEntity SoliscloudTimedChargeEnd1 => new(_haContext, "time.soliscloud_timed_charge_end_1");
    ///<summary>Soliscloud Timed Charge End 2</summary>
    public TimeEntity SoliscloudTimedChargeEnd2 => new(_haContext, "time.soliscloud_timed_charge_end_2");
    ///<summary>Soliscloud Timed Charge End 3</summary>
    public TimeEntity SoliscloudTimedChargeEnd3 => new(_haContext, "time.soliscloud_timed_charge_end_3");
    ///<summary>Soliscloud Timed Charge Start 1</summary>
    public TimeEntity SoliscloudTimedChargeStart1 => new(_haContext, "time.soliscloud_timed_charge_start_1");
    ///<summary>Soliscloud Timed Charge Start 2</summary>
    public TimeEntity SoliscloudTimedChargeStart2 => new(_haContext, "time.soliscloud_timed_charge_start_2");
    ///<summary>Soliscloud Timed Charge Start 3</summary>
    public TimeEntity SoliscloudTimedChargeStart3 => new(_haContext, "time.soliscloud_timed_charge_start_3");
    ///<summary>Soliscloud Timed Discharge End 1</summary>
    public TimeEntity SoliscloudTimedDischargeEnd1 => new(_haContext, "time.soliscloud_timed_discharge_end_1");
    ///<summary>Soliscloud Timed Discharge End 2</summary>
    public TimeEntity SoliscloudTimedDischargeEnd2 => new(_haContext, "time.soliscloud_timed_discharge_end_2");
    ///<summary>Soliscloud Timed Discharge End 3</summary>
    public TimeEntity SoliscloudTimedDischargeEnd3 => new(_haContext, "time.soliscloud_timed_discharge_end_3");
    ///<summary>Soliscloud Timed Discharge Start 1</summary>
    public TimeEntity SoliscloudTimedDischargeStart1 => new(_haContext, "time.soliscloud_timed_discharge_start_1");
    ///<summary>Soliscloud Timed Discharge Start 2</summary>
    public TimeEntity SoliscloudTimedDischargeStart2 => new(_haContext, "time.soliscloud_timed_discharge_start_2");
    ///<summary>Soliscloud Timed Discharge Start 3</summary>
    public TimeEntity SoliscloudTimedDischargeStart3 => new(_haContext, "time.soliscloud_timed_discharge_start_3");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all update entities currently registered (at runtime) in Home Assistant as UpdateEntity</summary>
    public IEnumerable<UpdateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("update.")).Select(e => new UpdateEntity(e));
    ///<summary>apexcharts-card update</summary>
    public UpdateEntity ApexchartsCardUpdate => new(_haContext, "update.apexcharts_card_update");
    ///<summary>Average Sensor update</summary>
    public UpdateEntity AverageSensorUpdate => new(_haContext, "update.average_sensor_update");
    ///<summary>HACS update</summary>
    public UpdateEntity HacsUpdate => new(_haContext, "update.hacs_update");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>mini-graph-card update</summary>
    public UpdateEntity MiniGraphCardUpdate => new(_haContext, "update.mini_graph_card_update");
    ///<summary>NetDaemon V5 (.NET 9) Update</summary>
    public UpdateEntity NetdaemonV5Net9Update => new(_haContext, "update.netdaemon_v5_net_9_update");
    ///<summary>Open Charge Point Protocol (OCPP) update</summary>
    public UpdateEntity OpenChargePointProtocolOcppUpdate => new(_haContext, "update.open_charge_point_protocol_ocpp_update");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Solaredge Modbus update</summary>
    public UpdateEntity SolaredgeModbusUpdate => new(_haContext, "update.solaredge_modbus_update");
    ///<summary>Solis Modbus Integration update</summary>
    public UpdateEntity SolisModbusIntegrationUpdate => new(_haContext, "update.solis_modbus_integration_update");
    ///<summary>SolisCloud portal integration update</summary>
    public UpdateEntity SoliscloudPortalIntegrationUpdate => new(_haContext, "update.soliscloud_portal_integration_update");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>Volkswagen We Connect ID update</summary>
    public UpdateEntity VolkswagenWeConnectIdUpdate => new(_haContext, "update.volkswagen_we_connect_id_update");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all zone entities currently registered (at runtime) in Home Assistant as ZoneEntity</summary>
    public IEnumerable<ZoneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("zone.")).Select(e => new ZoneEntity(e));
    ///<summary>Thuis</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("current_humidity")]
    public double? CurrentHumidity { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("offset_celsius")]
    public double? OffsetCelsius { get; init; }

    [JsonPropertyName("offset_fahrenheit")]
    public double? OffsetFahrenheit { get; init; }

    [JsonPropertyName("default_overlay_type")]
    public string? DefaultOverlayType { get; init; }

    [JsonPropertyName("default_overlay_seconds")]
    public object? DefaultOverlaySeconds { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("swing_modes")]
    public IReadOnlyList<string>? SwingModes { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("last_captured")]
    public string? LastCaptured { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public object? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>, IInputTextEntityCore
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("status_description")]
    public string? StatusDescription { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("1")]
    public string? _1 { get; init; }

    [JsonPropertyName("ChargeProfileMaxStackLevel")]
    public string? ChargeProfileMaxStackLevel { get; init; }

    [JsonPropertyName("time")]
    public string? Time { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("Last updated")]
    public string? Lastupdated { get; init; }

    [JsonPropertyName("Inverter serial")]
    public string? Inverterserial { get; init; }

    [JsonPropertyName("API Name")]
    public string? APIName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("unit")]
    public string? Unit { get; init; }

    [JsonPropertyName("L1-N")]
    public double? L1N { get; init; }

    [JsonPropertyName("context")]
    public string? Context { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("L1")]
    public double? L1 { get; init; }

    [JsonPropertyName("time")]
    public string? Time { get; init; }

    [JsonPropertyName("setting")]
    public double? Setting { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("Last updated")]
    public string? Lastupdated { get; init; }

    [JsonPropertyName("Inverter serial")]
    public string? Inverterserial { get; init; }

    [JsonPropertyName("API Name")]
    public string? APIName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TimeEntity : Entity<TimeEntity, EntityState<TimeAttributes>, TimeAttributes>
{
    public TimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TimeAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("display_precision")]
    public double? DisplayPrecision { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public string? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("update_percentage")]
    public object? UpdatePercentage { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<object>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AutomationServices Automation { get; }

    BackupServices Backup { get; }

    ButtonServices Button { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    CommandLineServices CommandLine { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    ModbusServices Modbus { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    OcppServices Ocpp { get; }

    OnedriveServices Onedrive { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SolisModbusServices SolisModbus { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TadoServices Tado { get; }

    TimeServices Time { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    VolkswagenWeConnectIdServices VolkswagenWeConnectId { get; }

    WaterHeaterServices WaterHeater { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AutomationServices Automation => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public CommandLineServices CommandLine => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public ModbusServices Modbus => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public OcppServices Ocpp => new(_haContext);
    public OnedriveServices Onedrive => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SolisModbusServices SolisModbus => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TadoServices Tado => new(_haContext);
    public TimeServices Time => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VolkswagenWeConnectIdServices VolkswagenWeConnectId => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("automation", "reload", null, data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "toggle", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "turn_on", target, data);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a new backup with automatic backup settings.</summary>
    public void CreateAutomatic(object? data = null)
    {
        _haContext.CallService("backup", "create_automatic", null, data);
    }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("button", "press", target, data);
    }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "disable_motion_detection", target, data);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "enable_motion_detection", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, double? duration = null, double? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_off", target, data);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_on", target, data);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public double? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingHorizontalMode(ServiceTarget target, ClimateSetSwingHorizontalModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public void SetSwingHorizontalMode(ServiceTarget target, string swingHorizontalMode)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "toggle", target, data);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_off", target, data);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_on", target, data);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingHorizontalModeParameters
{
    ///<summary>Horizontal swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>The temperature setpoint.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>The max temperature setpoint.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>The min temperature setpoint.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.</summary>
    public void RemoteConnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_connect", null, data);
    }

    ///<summary>Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.</summary>
    public void RemoteDisconnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_disconnect", null, data);
    }
}

public partial class CommandLineServices
{
    private readonly IHaContext _haContext;
    public CommandLineServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads command line configuration from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("command_line", "reload", null, data);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public Task<JsonElement?> ProcessAsync(ConversationProcessParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public Task<JsonElement?> ProcessAsync(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "decrement", target, data);
    }

    ///<summary>Increments a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "increment", target, data);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "reset", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, double? gpsAccuracy = null, double? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public double? Battery { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to an FFmpeg-based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to an FFmpeg-based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to an FFmpeg-based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes(object? data = null)
    {
        _haContext.CallService("frontend", "reload_themes", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on to restart. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on to start. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    ///<param name="addon">The add-on to write to. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on to stop. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on to update. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot(object? data = null)
    {
        _haContext.CallService("hassio", "host_reboot", null, data);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown(object? data = null)
    {
        _haContext.CallService("hassio", "host_shutdown", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on to restart. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on to start. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on to write to. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on to stop. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on to update. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "check_config", null, data);
    }

    ///<summary>Reloads all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_all", null, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the Core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_core_config", null, data);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null, data);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart(object? data = null)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates(object? data = null)
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location above sea level. eg: 120</param>
    public void SetLocation(double latitude, double longitude, double? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop(object? data = null)
    {
        _haContext.CallService("homeassistant", "stop", null, data);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "toggle", target, data);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_off", target, data);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_on", target, data);
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>Elevation of your location above sea level. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_boolean", "reload", null, data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "toggle", target, data);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_off", target, data);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_on", target, data);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_button", "press", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_button", "reload", null, data);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_datetime", "reload", null, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, TimeOnly? time = null, string? datetime = null, double? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_number", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_select", "reload", null, data);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, IEnumerable<string> options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public IEnumerable<string>? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_text", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel(object? data = null)
    {
        _haContext.CallService("logger", "set_level", null, data);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class ModbusServices
{
    private readonly IHaContext _haContext;
    public ModbusServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads all Modbus entities.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("modbus", "reload", null, data);
    }

    ///<summary>Stops modbus hub.</summary>
    public void Stop(ModbusStopParameters data)
    {
        _haContext.CallService("modbus", "stop", null, data);
    }

    ///<summary>Stops modbus hub.</summary>
    ///<param name="hub">Modbus hub name. eg: hub1</param>
    public void Stop(string? hub = null)
    {
        _haContext.CallService("modbus", "stop", null, new ModbusStopParameters { Hub = hub });
    }

    ///<summary>Writes to a Modbus coil.</summary>
    public void WriteCoil(ModbusWriteCoilParameters data)
    {
        _haContext.CallService("modbus", "write_coil", null, data);
    }

    ///<summary>Writes to a Modbus coil.</summary>
    ///<param name="address">Address of the register to write to.</param>
    ///<param name="state">State to write. eg: 0 or [1,0]</param>
    ///<param name="slave">Address of the Modbus unit/server.</param>
    ///<param name="hub">Modbus hub name. eg: hub1</param>
    public void WriteCoil(double address, object state, double? slave = null, string? hub = null)
    {
        _haContext.CallService("modbus", "write_coil", null, new ModbusWriteCoilParameters { Address = address, State = state, Slave = slave, Hub = hub });
    }

    ///<summary>Writes to a Modbus holding register.</summary>
    public void WriteRegister(ModbusWriteRegisterParameters data)
    {
        _haContext.CallService("modbus", "write_register", null, data);
    }

    ///<summary>Writes to a Modbus holding register.</summary>
    ///<param name="address">Address of the holding register to write to.</param>
    ///<param name="slave">Address of the Modbus unit/server.</param>
    ///<param name="value">Value (single value or array) to write. eg: 0 or [4,0]</param>
    ///<param name="hub">Modbus hub name. eg: hub1</param>
    public void WriteRegister(double address, object value, double? slave = null, string? hub = null)
    {
        _haContext.CallService("modbus", "write_register", null, new ModbusWriteRegisterParameters { Address = address, Slave = slave, Value = value, Hub = hub });
    }
}

public partial record ModbusStopParameters
{
    ///<summary>Modbus hub name. eg: hub1</summary>
    [JsonPropertyName("hub")]
    public string? Hub { get; init; }
}

public partial record ModbusWriteCoilParameters
{
    ///<summary>Address of the register to write to.</summary>
    [JsonPropertyName("address")]
    public double? Address { get; init; }

    ///<summary>State to write. eg: 0 or [1,0]</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>Address of the Modbus unit/server.</summary>
    [JsonPropertyName("slave")]
    public double? Slave { get; init; }

    ///<summary>Modbus hub name. eg: hub1</summary>
    [JsonPropertyName("hub")]
    public string? Hub { get; init; }
}

public partial record ModbusWriteRegisterParameters
{
    ///<summary>Address of the holding register to write to.</summary>
    [JsonPropertyName("address")]
    public double? Address { get; init; }

    ///<summary>Address of the Modbus unit/server.</summary>
    [JsonPropertyName("slave")]
    public double? Slave { get; init; }

    ///<summary>Value (single value or array) to write. eg: 0 or [4,0]</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Modbus hub name. eg: hub1</summary>
    [JsonPropertyName("hub")]
    public string? Hub { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_tablet_johan integration.</summary>
    public void MobileAppTabletJohan(NotifyMobileAppTabletJohanParameters data)
    {
        _haContext.CallService("notify", "mobile_app_tablet_johan", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_tablet_johan integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppTabletJohan(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_tablet_johan", null, new NotifyMobileAppTabletJohanParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyMobileAppTabletJohanParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class OcppServices
{
    private readonly IHaContext _haContext;
    public OcppServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all charging profiles (limits) set (dependent on charger support)</summary>
    public void ClearProfile(object? data = null)
    {
        _haContext.CallService("ocpp", "clear_profile", null, data);
    }

    ///<summary>Change supported Ocpp v1.6 configuration values</summary>
    public void Configure(OcppConfigureParameters data)
    {
        _haContext.CallService("ocpp", "configure", null, data);
    }

    ///<summary>Change supported Ocpp v1.6 configuration values</summary>
    ///<param name="ocppKey">Write-enabled key name supported eg: WebSocketPingInterval</param>
    ///<param name="value">Value to write to key eg: 60</param>
    public void Configure(object ocppKey, object value)
    {
        _haContext.CallService("ocpp", "configure", null, new OcppConfigureParameters { OcppKey = ocppKey, Value = value });
    }

    ///<summary>Note this is specific to charger, see manufacturer&apos;s documentation</summary>
    public void DataTransfer(OcppDataTransferParameters data)
    {
        _haContext.CallService("ocpp", "data_transfer", null, data);
    }

    ///<summary>Note this is specific to charger, see manufacturer&apos;s documentation</summary>
    ///<param name="vendorId">Defined by charger manufacturer eg: ABC</param>
    ///<param name="messageId">Defined by charger manufacturer eg: ABC</param>
    ///<param name="data">Defined by charger manufacturer eg: ABC</param>
    public void DataTransfer(object vendorId, object? messageId = null, object? data = null)
    {
        _haContext.CallService("ocpp", "data_transfer", null, new OcppDataTransferParameters { VendorId = vendorId, MessageId = messageId, Data = data });
    }

    ///<summary>Get supported Ocpp v1.6 configuration values</summary>
    public void GetConfiguration(OcppGetConfigurationParameters data)
    {
        _haContext.CallService("ocpp", "get_configuration", null, data);
    }

    ///<summary>Get supported Ocpp v1.6 configuration values</summary>
    ///<param name="ocppKey">Key name supported eg: WebSocketPingInterval</param>
    public void GetConfiguration(object ocppKey)
    {
        _haContext.CallService("ocpp", "get_configuration", null, new OcppGetConfigurationParameters { OcppKey = ocppKey });
    }

    ///<summary>Specify server url to upload diagnostic data to (dependent on charger support), supported transfer protocols can be requested by the configuration key SupportedFileTransferProtocols</summary>
    public void GetDiagnostics(OcppGetDiagnosticsParameters data)
    {
        _haContext.CallService("ocpp", "get_diagnostics", null, data);
    }

    ///<summary>Specify server url to upload diagnostic data to (dependent on charger support), supported transfer protocols can be requested by the configuration key SupportedFileTransferProtocols</summary>
    ///<param name="uploadUrl">Full url to upload to eg: https://webhook.site/abc</param>
    public void GetDiagnostics(object uploadUrl)
    {
        _haContext.CallService("ocpp", "get_diagnostics", null, new OcppGetDiagnosticsParameters { UploadUrl = uploadUrl });
    }

    ///<summary>Sets the maximum charge rate in Amps or Watts (dependent on charger support)</summary>
    public void SetChargeRate(OcppSetChargeRateParameters data)
    {
        _haContext.CallService("ocpp", "set_charge_rate", null, data);
    }

    ///<summary>Sets the maximum charge rate in Amps or Watts (dependent on charger support)</summary>
    ///<param name="limitAmps">Maximum charge rate in Amps (optional) eg: 16</param>
    ///<param name="limitWatts">Maximum charge rate in Watts (optional) eg: 1500</param>
    ///<param name="connId">Optional, 0 = all connectors (default), 1 is first connector eg: 0</param>
    ///<param name="customProfile">Used to send a custom charge profile to charger (for advanced users only use &gt;- or &apos;&apos; to ensure profile is a string variable) eg: {&quot;chargingProfileId&quot;:8,&quot;stackLevel&quot;:0,&quot;chargingProfileKind&quot;:&quot;Relative&quot;,&quot;chargingProfilePurpose&quot;:&quot;ChargePointMaxProfile&quot;,&quot;chargingSchedule&quot;:{&quot;chargingRateUnit&quot;:&quot;A&quot;,&quot;chargingSchedulePeriod&quot;:[{&quot;startPeriod&quot;:0,&quot;limit&quot;:16}]}}</param>
    public void SetChargeRate(object? limitAmps = null, object? limitWatts = null, object? connId = null, object? customProfile = null)
    {
        _haContext.CallService("ocpp", "set_charge_rate", null, new OcppSetChargeRateParameters { LimitAmps = limitAmps, LimitWatts = limitWatts, ConnId = connId, CustomProfile = customProfile });
    }

    ///<summary>Specify server to download firmware and time to delay updating (dependent on charger support), supported transfer protocols can be requested by the configuration key SupportedFileTransferProtocols</summary>
    public void UpdateFirmware(OcppUpdateFirmwareParameters data)
    {
        _haContext.CallService("ocpp", "update_firmware", null, data);
    }

    ///<summary>Specify server to download firmware and time to delay updating (dependent on charger support), supported transfer protocols can be requested by the configuration key SupportedFileTransferProtocols</summary>
    ///<param name="firmwareUrl">Full url of firmware file (http or https) eg: http://www.charger.com/firmware.bin</param>
    ///<param name="delayHours">Hours to delay charger update eg: 12</param>
    public void UpdateFirmware(object firmwareUrl, object? delayHours = null)
    {
        _haContext.CallService("ocpp", "update_firmware", null, new OcppUpdateFirmwareParameters { FirmwareUrl = firmwareUrl, DelayHours = delayHours });
    }
}

public partial record OcppConfigureParameters
{
    ///<summary>Write-enabled key name supported eg: WebSocketPingInterval</summary>
    [JsonPropertyName("ocpp_key")]
    public object? OcppKey { get; init; }

    ///<summary>Value to write to key eg: 60</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record OcppDataTransferParameters
{
    ///<summary>Defined by charger manufacturer eg: ABC</summary>
    [JsonPropertyName("vendor_id")]
    public object? VendorId { get; init; }

    ///<summary>Defined by charger manufacturer eg: ABC</summary>
    [JsonPropertyName("message_id")]
    public object? MessageId { get; init; }

    ///<summary>Defined by charger manufacturer eg: ABC</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record OcppGetConfigurationParameters
{
    ///<summary>Key name supported eg: WebSocketPingInterval</summary>
    [JsonPropertyName("ocpp_key")]
    public object? OcppKey { get; init; }
}

public partial record OcppGetDiagnosticsParameters
{
    ///<summary>Full url to upload to eg: https://webhook.site/abc</summary>
    [JsonPropertyName("upload_url")]
    public object? UploadUrl { get; init; }
}

public partial record OcppSetChargeRateParameters
{
    ///<summary>Maximum charge rate in Amps (optional) eg: 16</summary>
    [JsonPropertyName("limit_amps")]
    public object? LimitAmps { get; init; }

    ///<summary>Maximum charge rate in Watts (optional) eg: 1500</summary>
    [JsonPropertyName("limit_watts")]
    public object? LimitWatts { get; init; }

    ///<summary>Optional, 0 = all connectors (default), 1 is first connector eg: 0</summary>
    [JsonPropertyName("conn_id")]
    public object? ConnId { get; init; }

    ///<summary>Used to send a custom charge profile to charger (for advanced users only use &gt;- or &apos;&apos; to ensure profile is a string variable) eg: {&quot;chargingProfileId&quot;:8,&quot;stackLevel&quot;:0,&quot;chargingProfileKind&quot;:&quot;Relative&quot;,&quot;chargingProfilePurpose&quot;:&quot;ChargePointMaxProfile&quot;,&quot;chargingSchedule&quot;:{&quot;chargingRateUnit&quot;:&quot;A&quot;,&quot;chargingSchedulePeriod&quot;:[{&quot;startPeriod&quot;:0,&quot;limit&quot;:16}]}}</summary>
    [JsonPropertyName("custom_profile")]
    public object? CustomProfile { get; init; }
}

public partial record OcppUpdateFirmwareParameters
{
    ///<summary>Full url of firmware file (http or https) eg: http://www.charger.com/firmware.bin</summary>
    [JsonPropertyName("firmware_url")]
    public object? FirmwareUrl { get; init; }

    ///<summary>Hours to delay charger update eg: 12</summary>
    [JsonPropertyName("delay_hours")]
    public object? DelayHours { get; init; }
}

public partial class OnedriveServices
{
    private readonly IHaContext _haContext;
    public OnedriveServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Uploads files to OneDrive.</summary>
    public void Upload(OnedriveUploadParameters data)
    {
        _haContext.CallService("onedrive", "upload", null, data);
    }

    ///<summary>Uploads files to OneDrive.</summary>
    ///<param name="configEntryId">The config entry representing the OneDrive you want to upload to.</param>
    ///<param name="filename">Path to the file to upload. eg: /config/www/image.jpg</param>
    ///<param name="destinationFolder">Folder inside the Home Assistant app folder (Apps/Home Assistant) you want to upload the file to. Will be created if it does not exist. eg: photos/snapshots</param>
    public void Upload(object configEntryId, string destinationFolder, object? filename = null)
    {
        _haContext.CallService("onedrive", "upload", null, new OnedriveUploadParameters { ConfigEntryId = configEntryId, Filename = filename, DestinationFolder = destinationFolder });
    }

    ///<summary>Uploads files to OneDrive.</summary>
    public Task<JsonElement?> UploadAsync(OnedriveUploadParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("onedrive", "upload", null, data);
    }

    ///<summary>Uploads files to OneDrive.</summary>
    ///<param name="configEntryId">The config entry representing the OneDrive you want to upload to.</param>
    ///<param name="filename">Path to the file to upload. eg: /config/www/image.jpg</param>
    ///<param name="destinationFolder">Folder inside the Home Assistant app folder (Apps/Home Assistant) you want to upload the file to. Will be created if it does not exist. eg: photos/snapshots</param>
    public Task<JsonElement?> UploadAsync(object configEntryId, string destinationFolder, object? filename = null)
    {
        return _haContext.CallServiceWithResponseAsync("onedrive", "upload", null, new OnedriveUploadParameters { ConfigEntryId = configEntryId, Filename = filename, DestinationFolder = destinationFolder });
    }
}

public partial record OnedriveUploadParameters
{
    ///<summary>The config entry representing the OneDrive you want to upload to.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }

    ///<summary>Path to the file to upload. eg: /config/www/image.jpg</summary>
    [JsonPropertyName("filename")]
    public object? Filename { get; init; }

    ///<summary>Folder inside the Home Assistant app folder (Apps/Home Assistant) you want to upload the file to. Will be created if it does not exist. eg: photos/snapshots</summary>
    [JsonPropertyName("destination_folder")]
    public string? DestinationFolder { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be deleted. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Deletes all notifications from the notifications panel.</summary>
    public void DismissAll(object? data = null)
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null, data);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be deleted. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("person", "reload", null, data);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable(object? data = null)
    {
        _haContext.CallService("recorder", "disable", null, data);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable(object? data = null)
    {
        _haContext.CallService("recorder", "enable", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(double? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the Recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the Recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the Recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, double? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the Recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the Recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the Recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, double? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("scene", "delete", target, data);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("scene", "reload", null, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, double? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the configured time ranges of one or multiple schedules.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetSchedule(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("schedule", "get_schedule", target, data);
    }

    ///<summary>Retrieves the configured time ranges of one or multiple schedules.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetScheduleAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("schedule", "get_schedule", target, data);
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("schedule", "reload", null, data);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("script", "reload", null, data);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "toggle", target, data);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_off", target, data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_on", target, data);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SolisModbusServices
{
    private readonly IHaContext _haContext;
    public SolisModbusServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes a value to a holding register</summary>
    public void SolisWriteHoldingRegister(SolisModbusSolisWriteHoldingRegisterParameters data)
    {
        _haContext.CallService("solis_modbus", "solis_write_holding_register", null, data);
    }

    ///<summary>Writes a value to a holding register</summary>
    ///<param name="address">Address to write to eg: 43142</param>
    ///<param name="value">Value to write eg: 500</param>
    ///<param name="host">Inverter IP (only required if you have multiple inverters) eg: 192.168.1.75</param>
    public void SolisWriteHoldingRegister(object? address = null, object? value = null, object? host = null)
    {
        _haContext.CallService("solis_modbus", "solis_write_holding_register", null, new SolisModbusSolisWriteHoldingRegisterParameters { Address = address, Value = value, Host = host });
    }

    ///<summary>Sets the time of the entity to the provided one</summary>
    public void SolisWriteTime(SolisModbusSolisWriteTimeParameters data)
    {
        _haContext.CallService("solis_modbus", "solis_write_time", null, data);
    }

    ///<summary>Sets the time of the entity to the provided one</summary>
    ///<param name="entityId">Entity ID of the time entity you want to change eg: sensor.solis_time_charging_charge_start_hour_slot_1</param>
    ///<param name="time">Time in HH:MM or HH:MM:SS eg: 14:50</param>
    public void SolisWriteTime(object? entityId = null, object? time = null)
    {
        _haContext.CallService("solis_modbus", "solis_write_time", null, new SolisModbusSolisWriteTimeParameters { EntityId = entityId, Time = time });
    }
}

public partial record SolisModbusSolisWriteHoldingRegisterParameters
{
    ///<summary>Address to write to eg: 43142</summary>
    [JsonPropertyName("address")]
    public object? Address { get; init; }

    ///<summary>Value to write eg: 500</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Inverter IP (only required if you have multiple inverters) eg: 192.168.1.75</summary>
    [JsonPropertyName("host")]
    public object? Host { get; init; }
}

public partial record SolisModbusSolisWriteTimeParameters
{
    ///<summary>Entity ID of the time entity you want to change eg: sensor.solis_time_charging_charge_start_hour_slot_1</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>Time in HH:MM or HH:MM:SS eg: 14:50</summary>
    [JsonPropertyName("time")]
    public object? Time { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "toggle", target, data);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_off", target, data);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_on", target, data);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes all log entries.</summary>
    public void Clear(object? data = null)
    {
        _haContext.CallService("system_log", "clear", null, data);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TadoServices
{
    private readonly IHaContext _haContext;
    public TadoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a meter reading to Tado Energy IQ.</summary>
    public void AddMeterReading(TadoAddMeterReadingParameters data)
    {
        _haContext.CallService("tado", "add_meter_reading", null, data);
    }

    ///<summary>Adds a meter reading to Tado Energy IQ.</summary>
    ///<param name="configEntry">Config entry to add meter reading to.</param>
    ///<param name="reading">Reading in m³ or kWh without decimals.</param>
    public void AddMeterReading(object configEntry, long reading)
    {
        _haContext.CallService("tado", "add_meter_reading", null, new TadoAddMeterReadingParameters { ConfigEntry = configEntry, Reading = reading });
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetClimateTemperatureOffset(ServiceTarget target, TadoSetClimateTemperatureOffsetParameters data)
    {
        _haContext.CallService("tado", "set_climate_temperature_offset", target, data);
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    ///<param name="offset">Offset you would like (depending on your device).</param>
    public void SetClimateTemperatureOffset(ServiceTarget target, double? offset = null)
    {
        _haContext.CallService("tado", "set_climate_temperature_offset", target, new TadoSetClimateTemperatureOffsetParameters { Offset = offset });
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetClimateTimer(ServiceTarget target, TadoSetClimateTimerParameters data)
    {
        _haContext.CallService("tado", "set_climate_timer", target, data);
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    ///<param name="temperature">Temperature to set climate entity to.</param>
    ///<param name="timePeriod">Choose this or &apos;Overlay&apos;. Set the time period for the change if you want to be specific. eg: 01:30:00</param>
    ///<param name="requestedOverlay">Choose this or &apos;Time period&apos;. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on Tado app setting. eg: MANUAL</param>
    public void SetClimateTimer(ServiceTarget target, double temperature, string? timePeriod = null, object? requestedOverlay = null)
    {
        _haContext.CallService("tado", "set_climate_timer", target, new TadoSetClimateTimerParameters { Temperature = temperature, TimePeriod = timePeriod, RequestedOverlay = requestedOverlay });
    }

    ///<summary>Turns on water heater for a set time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetWaterHeaterTimer(ServiceTarget target, TadoSetWaterHeaterTimerParameters data)
    {
        _haContext.CallService("tado", "set_water_heater_timer", target, data);
    }

    ///<summary>Turns on water heater for a set time.</summary>
    ///<param name="timePeriod">Set the time period for the boost. eg: 01:30:00</param>
    ///<param name="temperature">Temperature to set heater to.</param>
    public void SetWaterHeaterTimer(ServiceTarget target, string timePeriod, double? temperature = null)
    {
        _haContext.CallService("tado", "set_water_heater_timer", target, new TadoSetWaterHeaterTimerParameters { TimePeriod = timePeriod, Temperature = temperature });
    }
}

public partial record TadoAddMeterReadingParameters
{
    ///<summary>Config entry to add meter reading to.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>Reading in m³ or kWh without decimals.</summary>
    [JsonPropertyName("reading")]
    public long? Reading { get; init; }
}

public partial record TadoSetClimateTemperatureOffsetParameters
{
    ///<summary>Offset you would like (depending on your device).</summary>
    [JsonPropertyName("offset")]
    public double? Offset { get; init; }
}

public partial record TadoSetClimateTimerParameters
{
    ///<summary>Temperature to set climate entity to.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>Choose this or &apos;Overlay&apos;. Set the time period for the change if you want to be specific. eg: 01:30:00</summary>
    [JsonPropertyName("time_period")]
    public string? TimePeriod { get; init; }

    ///<summary>Choose this or &apos;Time period&apos;. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on Tado app setting. eg: MANUAL</summary>
    [JsonPropertyName("requested_overlay")]
    public object? RequestedOverlay { get; init; }
}

public partial record TadoSetWaterHeaterTimerParameters
{
    ///<summary>Set the time period for the boost. eg: 01:30:00</summary>
    [JsonPropertyName("time_period")]
    public string? TimePeriod { get; init; }

    ///<summary>Temperature to set heater to.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }
}

public partial class TimeServices
{
    private readonly IHaContext _haContext;
    public TimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TimeSetValueParameters data)
    {
        _haContext.CallService("time", "set_value", target, data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="time">The time to set. eg: 22:15</param>
    public void SetValue(ServiceTarget target, TimeOnly time)
    {
        _haContext.CallService("time", "set_value", target, new TimeSetValueParameters { Time = time });
    }
}

public partial record TimeSetValueParameters
{
    ///<summary>The time to set. eg: 22:15</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "cancel", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "finish", target, data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "pause", target, data);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("timer", "reload", null, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Custom duration to restart the timer with. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache(object? data = null)
    {
        _haContext.CallService("tts", "clear_cache", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "clear_skipped", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "skip", target, data);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VolkswagenWeConnectIdServices
{
    private readonly IHaContext _haContext;
    public VolkswagenWeConnectIdServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the AC charging speed in Volkswagen ID cars.</summary>
    public void VolkswagenIdSetAcChargeSpeed(VolkswagenWeConnectIdVolkswagenIdSetAcChargeSpeedParameters data)
    {
        _haContext.CallService("volkswagen_we_connect_id", "volkswagen_id_set_ac_charge_speed", null, data);
    }

    ///<summary>Sets the AC charging speed in Volkswagen ID cars.</summary>
    ///<param name="vin">Vehicle identification number for the car. eg: WVGZZZA1ZMP001337</param>
    ///<param name="maximumReduced">Maximum (default) charging speed or reduced speed. Actual maximum/reduced speed depends on charging station.</param>
    public void VolkswagenIdSetAcChargeSpeed(string vin, object maximumReduced)
    {
        _haContext.CallService("volkswagen_we_connect_id", "volkswagen_id_set_ac_charge_speed", null, new VolkswagenWeConnectIdVolkswagenIdSetAcChargeSpeedParameters { Vin = vin, MaximumReduced = maximumReduced });
    }

    ///<summary>Sets climatisation in Volkswagen ID cars.</summary>
    public void VolkswagenIdSetClimatisation(VolkswagenWeConnectIdVolkswagenIdSetClimatisationParameters data)
    {
        _haContext.CallService("volkswagen_we_connect_id", "volkswagen_id_set_climatisation", null, data);
    }

    ///<summary>Sets climatisation in Volkswagen ID cars.</summary>
    ///<param name="vin">Vehicle identification number for the car. eg: WVGZZZA1ZMP001337</param>
    ///<param name="startStop">Starts or stops climatisation.</param>
    ///<param name="targetTemp">Sets target temperature in celsius.</param>
    public void VolkswagenIdSetClimatisation(string vin, object startStop, double? targetTemp = null)
    {
        _haContext.CallService("volkswagen_we_connect_id", "volkswagen_id_set_climatisation", null, new VolkswagenWeConnectIdVolkswagenIdSetClimatisationParameters { Vin = vin, StartStop = startStop, TargetTemp = targetTemp });
    }

    ///<summary>Sets the target SoC in Volkswagen ID cars.</summary>
    public void VolkswagenIdSetTargetSoc(VolkswagenWeConnectIdVolkswagenIdSetTargetSocParameters data)
    {
        _haContext.CallService("volkswagen_we_connect_id", "volkswagen_id_set_target_soc", null, data);
    }

    ///<summary>Sets the target SoC in Volkswagen ID cars.</summary>
    ///<param name="vin">Vehicle identification number for the car. eg: WVGZZZA1ZMP001337</param>
    ///<param name="targetSoc">Sets state of charge in percentage.</param>
    public void VolkswagenIdSetTargetSoc(string vin, long targetSoc)
    {
        _haContext.CallService("volkswagen_we_connect_id", "volkswagen_id_set_target_soc", null, new VolkswagenWeConnectIdVolkswagenIdSetTargetSocParameters { Vin = vin, TargetSoc = targetSoc });
    }

    ///<summary>Starts or stops charging of Volkswagen ID cars.</summary>
    public void VolkswagenIdStartStopCharging(VolkswagenWeConnectIdVolkswagenIdStartStopChargingParameters data)
    {
        _haContext.CallService("volkswagen_we_connect_id", "volkswagen_id_start_stop_charging", null, data);
    }

    ///<summary>Starts or stops charging of Volkswagen ID cars.</summary>
    ///<param name="vin">Vehicle identification number for the car. eg: WVGZZZA1ZMP001337</param>
    ///<param name="startStop">Starts or stops charging.</param>
    public void VolkswagenIdStartStopCharging(string vin, object startStop)
    {
        _haContext.CallService("volkswagen_we_connect_id", "volkswagen_id_start_stop_charging", null, new VolkswagenWeConnectIdVolkswagenIdStartStopChargingParameters { Vin = vin, StartStop = startStop });
    }
}

public partial record VolkswagenWeConnectIdVolkswagenIdSetAcChargeSpeedParameters
{
    ///<summary>Vehicle identification number for the car. eg: WVGZZZA1ZMP001337</summary>
    [JsonPropertyName("vin")]
    public string? Vin { get; init; }

    ///<summary>Maximum (default) charging speed or reduced speed. Actual maximum/reduced speed depends on charging station.</summary>
    [JsonPropertyName("maximum_reduced")]
    public object? MaximumReduced { get; init; }
}

public partial record VolkswagenWeConnectIdVolkswagenIdSetClimatisationParameters
{
    ///<summary>Vehicle identification number for the car. eg: WVGZZZA1ZMP001337</summary>
    [JsonPropertyName("vin")]
    public string? Vin { get; init; }

    ///<summary>Starts or stops climatisation.</summary>
    [JsonPropertyName("start_stop")]
    public object? StartStop { get; init; }

    ///<summary>Sets target temperature in celsius.</summary>
    [JsonPropertyName("target_temp")]
    public double? TargetTemp { get; init; }
}

public partial record VolkswagenWeConnectIdVolkswagenIdSetTargetSocParameters
{
    ///<summary>Vehicle identification number for the car. eg: WVGZZZA1ZMP001337</summary>
    [JsonPropertyName("vin")]
    public string? Vin { get; init; }

    ///<summary>Sets state of charge in percentage.</summary>
    [JsonPropertyName("target_soc")]
    public long? TargetSoc { get; init; }
}

public partial record VolkswagenWeConnectIdVolkswagenIdStartStopChargingParameters
{
    ///<summary>Vehicle identification number for the car. eg: WVGZZZA1ZMP001337</summary>
    [JsonPropertyName("vin")]
    public string? Vin { get; init; }

    ///<summary>Starts or stops charging.</summary>
    [JsonPropertyName("start_stop")]
    public object? StartStop { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_off", target, data);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_on", target, data);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("zone", "reload", null, data);
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputTextEntityCore target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputTextEntityCore to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IInputTextEntityCore target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputTextEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class TadoEntityExtensionMethods
{
    ///<summary>Sets the temperature offset of climate entities.</summary>
    public static void SetClimateTemperatureOffset(this IClimateEntityCore target, TadoSetClimateTemperatureOffsetParameters data)
    {
        target.CallService("set_climate_temperature_offset", data);
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    public static void SetClimateTemperatureOffset(this IEnumerable<IClimateEntityCore> target, TadoSetClimateTemperatureOffsetParameters data)
    {
        target.CallService("set_climate_temperature_offset", data);
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="offset">Offset you would like (depending on your device).</param>
    public static void SetClimateTemperatureOffset(this IClimateEntityCore target, double? offset = null)
    {
        target.CallService("set_climate_temperature_offset", new TadoSetClimateTemperatureOffsetParameters { Offset = offset });
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="offset">Offset you would like (depending on your device).</param>
    public static void SetClimateTemperatureOffset(this IEnumerable<IClimateEntityCore> target, double? offset = null)
    {
        target.CallService("set_climate_temperature_offset", new TadoSetClimateTemperatureOffsetParameters { Offset = offset });
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    public static void SetClimateTimer(this IClimateEntityCore target, TadoSetClimateTimerParameters data)
    {
        target.CallService("set_climate_timer", data);
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    public static void SetClimateTimer(this IEnumerable<IClimateEntityCore> target, TadoSetClimateTimerParameters data)
    {
        target.CallService("set_climate_timer", data);
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Temperature to set climate entity to.</param>
    ///<param name="timePeriod">Choose this or &apos;Overlay&apos;. Set the time period for the change if you want to be specific. eg: 01:30:00</param>
    ///<param name="requestedOverlay">Choose this or &apos;Time period&apos;. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on Tado app setting. eg: MANUAL</param>
    public static void SetClimateTimer(this IClimateEntityCore target, double temperature, string? timePeriod = null, object? requestedOverlay = null)
    {
        target.CallService("set_climate_timer", new TadoSetClimateTimerParameters { Temperature = temperature, TimePeriod = timePeriod, RequestedOverlay = requestedOverlay });
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Temperature to set climate entity to.</param>
    ///<param name="timePeriod">Choose this or &apos;Overlay&apos;. Set the time period for the change if you want to be specific. eg: 01:30:00</param>
    ///<param name="requestedOverlay">Choose this or &apos;Time period&apos;. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on Tado app setting. eg: MANUAL</param>
    public static void SetClimateTimer(this IEnumerable<IClimateEntityCore> target, double temperature, string? timePeriod = null, object? requestedOverlay = null)
    {
        target.CallService("set_climate_timer", new TadoSetClimateTimerParameters { Temperature = temperature, TimePeriod = timePeriod, RequestedOverlay = requestedOverlay });
    }
}

public static class TimeEntityExtensionMethods
{
    ///<summary>Sets the time.</summary>
    public static void SetValue(this TimeEntity target, TimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the time.</summary>
    public static void SetValue(this IEnumerable<TimeEntity> target, TimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The TimeEntity to call this service for</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public static void SetValue(this TimeEntity target, TimeOnly time)
    {
        target.CallService("set_value", new TimeSetValueParameters { Time = time });
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The IEnumerable&lt;TimeEntity&gt; to call this service for</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public static void SetValue(this IEnumerable<TimeEntity> target, TimeOnly time)
    {
        target.CallService("set_value", new TimeSetValueParameters { Time = time });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("skip", data);
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("skip", data);
    }
}